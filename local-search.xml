<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python for Data Science and AI</title>
    <link href="/2021/02/21/Python%20for%20Data%20Science%20and%20AI/"/>
    <url>/2021/02/21/Python%20for%20Data%20Science%20and%20AI/</url>
    
    <content type="html"><![CDATA[<h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p><em>strings</em><br><em>integers</em><br><em>floats</em></p><ul><li>Converting from one object type to a different object type</li></ul><p><code>float(2)</code>  2.0        <code>str(1)</code> ”1”        <code>int(3.1)</code> 3</p><h2 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h2><p><code>8 / 2</code>         4.0<br><code>20 // 6</code>     3<br><code>20 % 6</code>     2</p><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><h5 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name=<span class="hljs-string">&#x27;jiang yuxuan&#x27;</span><br>print(name[<span class="hljs-number">0</span>])<br>print(name[<span class="hljs-number">6</span>])<br>print(<span class="hljs-built_in">len</span>(name))<br></code></pre></td></tr></table></figure><p>j<br>y<br>12</p><h5 id="Negative-Indexing"><a href="#Negative-Indexing" class="headerlink" title="Negative Indexing"></a>Negative Indexing</h5><p><code>print(name[-1])</code>    n</p><h5 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h5><p><code>print(name[1:4])</code>    ian</p><h5 id="Stride"><a href="#Stride" class="headerlink" title="Stride"></a>Stride</h5><p><code>print(name[::2])</code>    jagyxa</p><h2 id="String-Operations"><a href="#String-Operations" class="headerlink" title="String Operations"></a>String Operations</h2><p><strong>.upper</strong><br><strong>.replace</strong><br><strong>.find</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name=<span class="hljs-string">&#x27;jiang yuxuan&#x27;</span><br>print(name.upper())<br></code></pre></td></tr></table></figure><p>JIANG YUXUAN<br><code>print(name.replace(&#39;yuxuan&#39;,&#39;yu’))</code><br>jiang yu<br><code>print(name.find(&#39;yuxuan&#39;))</code><br>6</p><h2 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h2><p>==immutable==</p><ul><li><strong>.index( )</strong>:find the first index</li><li><strong>len( )</strong></li><li><strong>sorted( )</strong>:sort the values in a tuple and save it to a new tuple（排序）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">t_1=(‘disco<span class="hljs-string">&#x27;,10,1.2)</span><br><span class="hljs-string">print(t_1[-1])</span><br><span class="hljs-string">print(t_1[1:3])</span><br><span class="hljs-string">print(t_1.index(1.2))</span><br></code></pre></td></tr></table></figure><p>1.2<br>(10, 1.2)<br>2</p><h5 id="Combine-tuples"><a href="#Combine-tuples" class="headerlink" title="Combine tuples"></a>Combine tuples</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">t_1=(<span class="hljs-string">&#x27;disco&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1.2</span>)<br>t_2=t_1+(<span class="hljs-string">&#x27;hard rock&#x27;</span>,<span class="hljs-number">10</span>)<br>print(t_2)<br></code></pre></td></tr></table></figure><p>(‘disco’, 10, 1.2, ‘hard rock’, 10)</p><h5 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">t=(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)<br>new=<span class="hljs-built_in">sorted</span>(t)<br>print(new)<br></code></pre></td></tr></table></figure><p>[1, 2, 5]</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>change</li><li><strong>del( )</strong></li><li><strong>.extend( )</strong></li><li><strong>.append( )</strong></li><li><strong>.split( )</strong></li><li>copy/clone</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">l=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;A&#x27;</span>],[<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;B&#x27;</span>]]<br>print(l[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>B</p><h5 id="Change-the-element-based-on-the-index"><a href="#Change-the-element-based-on-the-index" class="headerlink" title="Change the element based on the index"></a>Change the element based on the index</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>l[<span class="hljs-number">0</span>]=<span class="hljs-number">2</span><br>print(l)<br></code></pre></td></tr></table></figure><p>[2, 2, 3]</p><h5 id="Delete-the-element-based-on-the-index"><a href="#Delete-the-element-based-on-the-index" class="headerlink" title="Delete the element based on the index"></a>Delete the element based on the index</h5><p><strong>del( )</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">del</span>(l[<span class="hljs-number">0</span>])<br>print(l)<br></code></pre></td></tr></table></figure><p>[2, 3]</p><h5 id="Add-new-elements-to-the-list"><a href="#Add-new-elements-to-the-list" class="headerlink" title="Add new elements to the list"></a>Add new elements to the list</h5><p><strong>.extend( )</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>l.extend([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br>print(l)<br></code></pre></td></tr></table></figure><p>[1, 2, 3, 4, 5]</p><h5 id="Add-one-element-to-the-list"><a href="#Add-one-element-to-the-list" class="headerlink" title="Add one element to the list"></a>Add one element to the list</h5><p><strong>.append( )</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>l.append([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br>print(l)<br></code></pre></td></tr></table></figure><p>[1, 2, 3, [4, 5]]</p><h5 id="split"><a href="#split" class="headerlink" title=".split( )"></a>.split( )</h5><ol><li>Split the string, default is by space</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">l=<span class="hljs-string">&#x27;jiang yu xuan&#x27;</span><br>print(l.split( ))<br></code></pre></td></tr></table></figure><p>[‘jiang’, ‘yu’, ‘xuan’]</p><ol start="2"><li>Split the string by others</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">l=<span class="hljs-string">&#x27;jiang-yu-xuan&#x27;</span><br>print(l.split(<span class="hljs-string">&#x27;-&#x27;</span>))<br></code></pre></td></tr></table></figure><p>[‘jiang’, ‘yu’, ‘xuan’]</p><h5 id="Copy-List"><a href="#Copy-List" class="headerlink" title="Copy  List"></a>Copy  List</h5><p>If you change A , B will also change.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">A=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>B=A<br>print(‘B[<span class="hljs-number">0</span>]:’,B[<span class="hljs-number">0</span>])<br>A[<span class="hljs-number">0</span>]=<span class="hljs-number">2</span><br>print(‘B[<span class="hljs-number">0</span>]:’,B[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>B[0]: 1<br>B[0]: 2</p><h5 id="Clone-List"><a href="#Clone-List" class="headerlink" title="Clone List"></a>Clone List</h5><p><code>B=A[:]</code><br>If you change A, B will not change.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">A=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>B=A[:]<br>print(<span class="hljs-string">&#x27;B[0]:&#x27;</span>,B[<span class="hljs-number">0</span>])<br>A[<span class="hljs-number">0</span>]=<span class="hljs-number">2</span><br>print(<span class="hljs-string">&#x27;B[0]:&#x27;</span>,B[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>B[0]: 1<br>B[0]: 1</p><h2 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h2><ul><li><strong>.keys( )</strong></li><li><strong>.values( )</strong></li><li><strong>del</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9cvxx57hj30we0n441z.jpg" alt="dictionaries"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">d=&#123;<span class="hljs-string">&#x27;jiang&#x27;</span>:<span class="hljs-number">11</span>,<span class="hljs-number">2</span>:<span class="hljs-number">22</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>):<span class="hljs-number">33</span>&#125;<br>print(d[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>22 </p><h5 id="Get-all-the-keys-in-dictionary"><a href="#Get-all-the-keys-in-dictionary" class="headerlink" title="Get all the keys in dictionary"></a>Get all the keys in dictionary</h5><p><strong>.keys( )</strong><br><code>print(d.keys())</code><br>dict_keys([‘jiang’, 2, (0, 1)])</p><h5 id="Get-all-the-values-in-dictionary"><a href="#Get-all-the-values-in-dictionary" class="headerlink" title="Get all the values in dictionary"></a>Get all the values in dictionary</h5><p><strong>.values( )</strong><br><code>print(d.values())</code><br>dict_values([11, 22, 33])</p><h5 id="Append-value-with-key-into-dictionary"><a href="#Append-value-with-key-into-dictionary" class="headerlink" title="Append value with key into dictionary"></a>Append value with key into dictionary</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d=&#123;<span class="hljs-string">&#x27;jiang&#x27;</span>:<span class="hljs-number">11</span>,<span class="hljs-number">2</span>:<span class="hljs-number">22</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>):<span class="hljs-number">33</span>&#125;<br>d[<span class="hljs-number">4</span>]=<span class="hljs-number">44</span><br>print(d)<br></code></pre></td></tr></table></figure><p>{‘jiang’: 11, 2: 22, (0, 1): 33, 4: 44}</p><h5 id="Delete-entries-by-key"><a href="#Delete-entries-by-key" class="headerlink" title="Delete entries by key"></a>Delete entries by key</h5><p><strong>del</strong><br><code>del d[&#39;jiang’]</code></p><h5 id="Verify-the-key-is-in-the-dictionary"><a href="#Verify-the-key-is-in-the-dictionary" class="headerlink" title="Verify the key is in the dictionary"></a>Verify the key is in the dictionary</h5><p><code>print(&#39;jiang&#39; in d)</code><br>True</p><h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h2><ul><li><strong>set( )</strong></li><li><strong>.add( )</strong></li><li><strong>.remove( )</strong></li><li><strong>&amp;</strong> / <strong>.intersection( )</strong></li><li><strong>.difference( )</strong></li><li><strong>.union( )</strong></li><li><strong>.issuperset( )</strong> / <strong>.issubset( )</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9cwsns98j31h00eun56.jpg" alt="Screen Shot 2020-01-04 at 00.56.42"><br>==Python will automatically remove duplicate items==<br>==Sets are unordered==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br>print(s)<br></code></pre></td></tr></table></figure><p>{1, 2, 3, 4}</p><h5 id="Convert-list-to-set"><a href="#Convert-list-to-set" class="headerlink" title="Convert list to set"></a>Convert list to set</h5><p><strong>set( )</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">l=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>s=<span class="hljs-built_in">set</span>(l)<br>print(s)<br></code></pre></td></tr></table></figure><p>{1, 2, 3, 4}</p><h5 id="Add-an-element-to-a-set"><a href="#Add-an-element-to-a-set" class="headerlink" title="Add an element to a set"></a>Add an element to a set</h5><p><strong>.add( )</strong><br><code>s.add(5)</code></p><h5 id="Remove-an-item-from-a-set"><a href="#Remove-an-item-from-a-set" class="headerlink" title="Remove an item from a set"></a>Remove an item from a set</h5><p><strong>.remove( )</strong><br><code>s.remove(1)</code></p><h5 id="Verify-if-an-element-is-in-the-set"><a href="#Verify-if-an-element-is-in-the-set" class="headerlink" title="Verify if an element is in the set"></a>Verify if an element is in the set</h5><p><code>1 in s</code></p><h5 id="Find-the-intersections"><a href="#Find-the-intersections" class="headerlink" title="Find the intersections"></a>Find the intersections</h5><p><strong>&amp;</strong><br><strong>.intersection( )</strong><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9cx6z15pj30yy0n07a9.jpg" alt="Screen Shot 2020-01-04 at 02.12.50"><br>a={1,2,3,4,5}<br>b={3,4,5,6,7}<br><code>print(a&amp;b)</code><br><code>print(a.intersection(b))</code>        {3, 4, 5}</p><h5 id="Find-the-difference-in-set1-but-not-set2"><a href="#Find-the-difference-in-set1-but-not-set2" class="headerlink" title="Find the difference in set1 but not set2"></a>Find the difference in set1 but not set2</h5><p><strong>.difference( )</strong><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9cxkrsrpj30y60mun08.jpg" alt="Screen Shot 2020-01-04 at 02.13.56"><br><code>print(a.difference(b))</code>    {1, 2}</p><h5 id="Find-the-union-of-two-sets"><a href="#Find-the-union-of-two-sets" class="headerlink" title="Find the union of two sets"></a>Find the union of two sets</h5><p><strong>.union( )</strong><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9cxqzcp6j30zq0nowhc.jpg" alt="Screen Shot 2020-01-04 at 02.13.27"><br><code>print(a.union(b))</code>        {1, 2, 3, 4, 5, 6, 7}</p><h5 id="Check-if-a-set-is-a-superset-or-subset-of-another-set"><a href="#Check-if-a-set-is-a-superset-or-subset-of-another-set" class="headerlink" title="Check if a set is a superset or subset of another set"></a>Check if a set is a superset or subset of another set</h5><p><strong>.issuperset( )</strong><br><strong>.issubset( )</strong><br>a={1,2,3,4,5}        b={3,4,5}<br><code>print(a.issuperset(b))</code>    True<br><code>print(b.issubset(a))</code>        True</p><h2 id="Loops-for"><a href="#Loops-for" class="headerlink" title="Loops - - for"></a>Loops - - for</h2><p>The for loop is used for a controlled flow of repetition.</p><ul><li><strong>for…in</strong></li><li><strong>range( )</strong></li><li><strong>for…in range( )</strong></li><li><strong>for…in enumerate( )</strong></li></ul><h5 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name=[<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-string">&#x27;Marry&#x27;</span>,<span class="hljs-string">&#x27;Bob&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name:<br>print(i)<br></code></pre></td></tr></table></figure><p>Jack<br>Marry<br>Bob</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">A=[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> A:<br>  print(<span class="hljs-number">2</span>*a)<br></code></pre></td></tr></table></figure><p>11<br>22<br>33</p><h5 id="range"><a href="#range" class="headerlink" title="range( )"></a>range( )</h5><p>It is helpful to think of the range object as an ordered list.<br><code>range(3)</code>          0,1,2</p><h5 id="for…-in-range"><a href="#for…-in-range" class="headerlink" title="for… in range ( )"></a>for… in range ( )</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>):<br>print(n)<br></code></pre></td></tr></table></figure><p>1<br>2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dates = [<span class="hljs-number">1982</span>,<span class="hljs-number">1980</span>,<span class="hljs-number">1973</span>]<br>N = <span class="hljs-built_in">len</span>(dates)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    print(dates[i])     <br></code></pre></td></tr></table></figure><p>1982<br>1980<br>1973</p><h5 id="Use-for-loop-to-change-the-elements-in-list"><a href="#Use-for-loop-to-change-the-elements-in-list" class="headerlink" title="Use for loop to change the elements in list"></a>Use for loop to change the elements in list</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>):<br>    print(<span class="hljs-string">&quot;Before square &quot;</span>, i, <span class="hljs-string">&#x27;is&#x27;</span>,  squares[i])<br>    squares[i] = <span class="hljs-string">&#x27;weight&#x27;</span><br>    print(<span class="hljs-string">&quot;After square &quot;</span>, i, <span class="hljs-string">&#x27;is&#x27;</span>,  squares[i])<br></code></pre></td></tr></table></figure><p>Before square  0 is red<br>After square  0 is weight<br>Before square  1 is yellow<br>After square  1 is weight<br>Before square  2 is green<br>After square  2 is weight</p><h5 id="for…in-enumerate"><a href="#for…in-enumerate" class="headerlink" title="for…in enumerate( )"></a>for…in enumerate( )</h5><p>We can access the index and the elements of a list as follows</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i,x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>]):<br>    print(i,x)<br></code></pre></td></tr></table></figure><p>0 A<br>1 B<br>2 C</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">squares=[<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br><span class="hljs-keyword">for</span> i, n <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(squares):<br>    print(i, n)<br></code></pre></td></tr></table></figure><p>0 red<br>1 yellow<br>2 green</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i,x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>]):<br>    print(i+<span class="hljs-number">1</span>,x)<br></code></pre></td></tr></table></figure><p>1 A<br>2 B<br>3 C</p><h2 id="Loops-while"><a href="#Loops-while" class="headerlink" title="Loops - - while"></a>Loops - - while</h2><p>The while loop exists as a tool for repeated execution based on a condition. The code block will keep being executed until the given logical condition returns a <strong>False</strong> boolean value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dates = [<span class="hljs-number">1982</span>, <span class="hljs-number">1980</span>, <span class="hljs-number">1973</span>, <span class="hljs-number">2000</span>]<br>i = <span class="hljs-number">0</span><br>year = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span>(year != <span class="hljs-number">1973</span>):<br>    year = dates[i]<br>    i = i + <span class="hljs-number">1</span><br>    print(year)<br>print(<span class="hljs-string">&quot;It took &quot;</span>, i ,<span class="hljs-string">&quot;repetitions to get out of loop.&quot;</span>)<br></code></pre></td></tr></table></figure><p>1982<br>1980<br>1973<br>It took  3 repetitions to get out of loop.</p><hr><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h5 id="Pre-defined-functions"><a href="#Pre-defined-functions" class="headerlink" title="Pre-defined functions"></a>Pre-defined functions</h5><ul><li><strong>sum( )</strong> :adds all the elements in a list or tuple</li><li><strong>len( )</strong> :returns the length of a list or tuple</li><li><strong>sorted( )</strong>:is a function and returns a new list, it does not change the list</li></ul><h5 id="def"><a href="#def" class="headerlink" title="def"></a>def</h5><p>The statement <strong>return</strong> exits a function, optionally passing back a value.<br>If there is no <strong>return</strong> statement, the function returns <strong>None</strong>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">a</span>):</span><br>    b = a + <span class="hljs-number">1</span><br>    print(a, <span class="hljs-string">&quot;if you add one&quot;</span>, b)<br>    <span class="hljs-keyword">return</span>(b)<br>add(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>1 if you add one 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Mult</span>(<span class="hljs-params">a, b</span>):</span><br>    c = a * b<br>    print(c)   <br>Mult(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>20</p><h5 id="Using-if-else-Statements-and-Loops-in-Functions"><a href="#Using-if-else-Statements-and-Loops-in-Functions" class="headerlink" title="Using if/else Statements and Loops in Functions"></a>Using if/else Statements and Loops in Functions</h5><p>The return() function is particularly useful if you have any IF statements in the function, when you want your output to be dependent on some condition:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">type_of_album</span>(<span class="hljs-params">artist, album, year_released</span>):</span>  <br>    print(artist, album, year_released)<br>    <span class="hljs-keyword">if</span> year_released &gt; <span class="hljs-number">1980</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Modern&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Oldie&quot;</span>   <br>x = type_of_album(<span class="hljs-string">&quot;Michael Jackson&quot;</span>, <span class="hljs-string">&quot;Thriller&quot;</span>, <span class="hljs-number">1980</span>)<br>print(x)<br></code></pre></td></tr></table></figure><p>Michael Jackson Thriller 1980</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">PrintList</span>(<span class="hljs-params">the_list</span>):</span><br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> the_list:<br>        print(element)<br>PrintList([<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;the man&#x27;</span>, <span class="hljs-string">&quot;abc&quot;</span>])<br></code></pre></td></tr></table></figure><p>1<br>1<br>the man<br>abc</p><h5 id="Setting-default-argument-values-in-your-custom-functions"><a href="#Setting-default-argument-values-in-your-custom-functions" class="headerlink" title="Setting default argument values in your custom functions"></a>Setting default argument values in your custom functions</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isGoodRating</span>(<span class="hljs-params">rating=<span class="hljs-number">4</span></span>):</span> <br>    <span class="hljs-keyword">if</span>(rating &lt; <span class="hljs-number">7</span>):<br>        print(<span class="hljs-string">&quot;this album sucks it&#x27;s rating is&quot;</span>,rating)      <br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&quot;this album is good its rating is&quot;</span>,rating)<br>isGoodRating()<br>isGoodRating(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>this album sucks it’s rating is 4<br>this album is good its rating is 10</p><h5 id="Global-variables"><a href="#Global-variables" class="headerlink" title="Global variables"></a>Global variables</h5><p><strong>global</strong><br>So far, we’ve been creating variables within functions, but we have not discussed variables outside the function. These are called global variables. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">artist = <span class="hljs-string">&quot;Michael Jackson&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printer1</span>(<span class="hljs-params">artist</span>):</span><br>    internal_var = artist<br>    print(artist, <span class="hljs-string">&quot;is an artist&quot;</span>) <br>printer1(artist)<br></code></pre></td></tr></table></figure><p>If we print internal_var we get an error because all the variables we create in the function is a <strong>local variable</strong>, meaning that the variable assignment does not persist outside the function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">artist = <span class="hljs-string">&quot;Michael Jackson&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printer</span>(<span class="hljs-params">artist</span>):</span><br>    <span class="hljs-keyword">global</span> internal_var <br>    internal_var= <span class="hljs-string">&quot;Whitney Houston&quot;</span><br>    print(artist,<span class="hljs-string">&quot;is an artist&quot;</span>)<br>printer(artist) <br>printer(internal_var)<br></code></pre></td></tr></table></figure><h2 id="Objects-and-Classes"><a href="#Objects-and-Classes" class="headerlink" title="Objects and Classes"></a>Objects and Classes</h2><h5 id="Creating-a-Class"><a href="#Creating-a-Class" class="headerlink" title="Creating a Class"></a>Creating a Class</h5><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9cy2lb4lj30xk0csaeq.jpg" alt="Screen Shot 2020-01-05 at 16.24.24"><br>constructo <strong><em>init</em></strong> which is used to initialize the object. The input are data attributes. The term self contains all the attributes in the set. For example the self.color gives the value of the attribute color and self.radius will give you the radius of the object. </p><h2 id="Reading-Files-with-Open"><a href="#Reading-Files-with-Open" class="headerlink" title="Reading Files with Open"></a>Reading Files with Open</h2><ul><li><strong>open</strong> function</li><li><strong>with open ( ) as…</strong></li><li><strong>.read</strong> method </li><li><strong>.readline</strong> method</li><li><strong>.readlines</strong> method</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9cy93zqaj30r005q0u2.jpg" alt="Screen Shot 2020-01-05 at 18.31.00"></p><h5 id="Read-the-Example1-txt"><a href="#Read-the-Example1-txt" class="headerlink" title="Read the Example1.txt"></a>Read the Example1.txt</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">example1 = <span class="hljs-string">&quot;/resources/data/Example1.txt&quot;</span><br>file1 = <span class="hljs-built_in">open</span>(example1, <span class="hljs-string">&quot;r”)</span><br></code></pre></td></tr></table></figure><h5 id="View-the-attributes-of-the-file"><a href="#View-the-attributes-of-the-file" class="headerlink" title="View the attributes of the file."></a>View the attributes of the file.</h5><p>The name of the file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Print the path of file</span><br>file1.name<br></code></pre></td></tr></table></figure><p>The mode the file object is in:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Print the mode of file, either &#x27;r&#x27; or &#x27;w&#x27;</span><br>file1.mode<br></code></pre></td></tr></table></figure><p>We can read the file and assign it to a variable :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">FileContent = file1.read()<br>FileContent<br></code></pre></td></tr></table></figure><p>We must close the file object:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Close file after finish</span><br>file1.close()<br></code></pre></td></tr></table></figure><h5 id="A-Better-Way-to-Open-a-File"><a href="#A-Better-Way-to-Open-a-File" class="headerlink" title="A Better Way to Open a File"></a>A Better Way to Open a File</h5><p>Using the <strong>with</strong> statement is better practice, it automatically closes the file even if the code encounters an exception.<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9cyfpekej30r208cgns.jpg" alt="Screen Shot 2020-01-05 at 18.41.47"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example1, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file1:<br>    FileContent = file1.read()<br>    print(FileContent)<br></code></pre></td></tr></table></figure><h5 id="Read-first-four-characters"><a href="#Read-first-four-characters" class="headerlink" title="Read first four characters"></a>Read first four characters</h5><p><strong>.read</strong>method</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example1, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file1:<br>    print(file1.read(<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><h5 id="Read-certain-amount-of-characters"><a href="#Read-certain-amount-of-characters" class="headerlink" title="Read certain amount of characters"></a>Read certain amount of characters</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example1, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file1:<br>    print(file1.read(<span class="hljs-number">4</span>))<br>    print(file1.read(<span class="hljs-number">4</span>))<br>    print(file1.read(<span class="hljs-number">7</span>))<br>    print(file1.read(<span class="hljs-number">15</span>))<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9cyln83sj30om0j4whg.jpg" alt="Screen Shot 2020-01-05 at 18.45.30"></p><h5 id="Read-one-line"><a href="#Read-one-line" class="headerlink" title="Read one line"></a>Read one line</h5><p><strong>.readline</strong> method</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example1, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file1:<br>    print(<span class="hljs-string">&quot;first line: &quot;</span> + file1.readline())<br></code></pre></td></tr></table></figure><p>Use a loop to iterate through each line</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example1,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file1:<br>        i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file1:<br>            print(<span class="hljs-string">&quot;Iteration&quot;</span>, <span class="hljs-built_in">str</span>(i), <span class="hljs-string">&quot;: &quot;</span>, line)<br>            i = i + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h5 id="Read-all-lines-and-save-as-a-list"><a href="#Read-all-lines-and-save-as-a-list" class="headerlink" title="Read all lines and save as a list"></a>Read all lines and save as a list</h5><p><strong>.readlines</strong> method</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example1, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file1:<br>    FileasList = file1.readlines()<br></code></pre></td></tr></table></figure><p>Print the first line:<br><code>FileasList[0]</code></p><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><p><code>a=np.array([0,1,2,3,4])</code><br>A numpy array is similar to a list. It’s usually fixed in size and each element is of the same type.</p><h3 id="1D-Numpy"><a href="#1D-Numpy" class="headerlink" title="1D Numpy"></a>1D Numpy</h3><h5 id="Assign-value"><a href="#Assign-value" class="headerlink" title="Assign value"></a>Assign value</h5><p>Assign the first element to 100</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">c=np.array([<span class="hljs-number">20</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>c[<span class="hljs-number">0</span>]=<span class="hljs-number">100</span><br>print(c)<br></code></pre></td></tr></table></figure><p>[100   1   2   3   4]</p><h5 id="Slicing"><a href="#Slicing" class="headerlink" title="Slicing"></a>Slicing</h5><ol><li>Like lists, we can slice the numpy array, and we can select the elements from 1 to 3 and assign it to a new numpy array d as follows<br><code>print(c[1:4]</code><br>[1 2 3]</li><li>Set the fourth element and fifth element to 300 and 400</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">c[<span class="hljs-number">3</span>:<span class="hljs-number">5</span>]=<span class="hljs-number">300</span>,<span class="hljs-number">400</span><br>print(c)<br></code></pre></td></tr></table></figure><p>[100   1   2 300 400]</p><h5 id="Other-Attributes"><a href="#Other-Attributes" class="headerlink" title="Other Attributes"></a>Other Attributes</h5><p><strong>.size</strong>                the number of elements in the array<br><strong>.ndim</strong>            the number of array dimensions<br>                    秩，即轴的数量或维度的数量<br><strong>.shape</strong>            数组的维度，对于矩阵，n 行 m 列<br><strong>.max( )</strong><br><strong>.min( )</strong><br><strong>.mean( )</strong><br><strong>.std( )</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>print(a.size)<br>print(a.ndim)<br>print(a.shape)<br></code></pre></td></tr></table></figure><p>5<br>1<br>(5,)</p><h5 id="Array-Addition"><a href="#Array-Addition" class="headerlink" title="Array Addition"></a>Array Addition</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br>b=np.array([<span class="hljs-number">3</span>,<span class="hljs-number">2</span>])<br>print(a+b)<br></code></pre></td></tr></table></figure><p>[4 4]</p><h5 id="Array-Multiplication"><a href="#Array-Multiplication" class="headerlink" title="Array Multiplication"></a>Array Multiplication</h5><p><code>print(2*a)</code>        [2 4]</p><h5 id="Product-of-Two-Numpy-Arrays"><a href="#Product-of-Two-Numpy-Arrays" class="headerlink" title="Product of Two Numpy Arrays"></a>Product of Two Numpy Arrays</h5><p><code>print(a*b)</code>        [3 4]</p><h5 id="Dot-Product"><a href="#Dot-Product" class="headerlink" title="Dot Product"></a>Dot Product</h5><p><code>print(np.dot(a,b))</code>        7</p><h5 id="Adding-Constant-to-a-Numpy-Array"><a href="#Adding-Constant-to-a-Numpy-Array" class="headerlink" title="Adding Constant to a Numpy Array"></a>Adding Constant to a Numpy Array</h5><p><code>print(a+1)</code><br>[2 3]</p><h3 id="2D-Numpy"><a href="#2D-Numpy" class="headerlink" title="2D Numpy"></a>2D Numpy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[[<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>],[<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>],[<span class="hljs-number">31</span>,<span class="hljs-number">32</span>,<span class="hljs-number">33</span>]]<br>A=np.array(a)<br>print(A)<br></code></pre></td></tr></table></figure><p>[[11 12 13]<br> [21 22 23]<br> [31 32 33]]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">print(A.ndim)<br>print(A.shape)<br>print(A.size)<br></code></pre></td></tr></table></figure><p>2<br>(3,3)<br>9</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记</title>
    <link href="/2021/02/21/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/21/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Basic-Concepts"><a href="#1-Basic-Concepts" class="headerlink" title="1. Basic Concepts"></a>1. Basic Concepts</h1><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>Integers  floats  strings</p><h3 id="Floats"><a href="#Floats" class="headerlink" title="Floats (/)"></a>Floats (/)</h3><p>Floats are used to represent numbers that aren’t integers.<br><code>8 / 2</code><br>4.0</p><h3 id="Exponentiation"><a href="#Exponentiation" class="headerlink" title="Exponentiation (* *)"></a>Exponentiation (* *)</h3><p><code>9 * * (1/2)</code><br>3</p><h3 id="Quotient-Remainder"><a href="#Quotient-Remainder" class="headerlink" title="Quotient //  Remainder %"></a>Quotient //  Remainder %</h3><p><code>20 // 6</code><br>3<br><code>20 % 6</code><br>2<br><code>7 % (5 // 2)</code><br>1</p><h3 id="Strings-‘-‘-“-“"><a href="#Strings-‘-‘-“-“" class="headerlink" title="Strings  (‘ ‘ “ “)"></a>Strings  (‘ ‘ “ “)</h3><p><code>’He\&#39;s a very naughty boy!&#39;</code><br>‘He’s a very naughty boy!’</p><h3 id="Newlines-n-amp-‘’’"><a href="#Newlines-n-amp-‘’’" class="headerlink" title="Newlines  (\n &amp;  ‘’’)"></a>Newlines  (\n &amp;  ‘’’)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Hi,</span><br><span class="hljs-string">How&#x27;s you doing?&#x27;&#x27;&#x27;</span>)<br><span class="hljs-keyword">or</span><br>print(<span class="hljs-string">&quot;\n Hii, \n How&#x27;s you dong?&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>Octothorpe: #<br>‘’’ ‘’’             “””  “””</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter your name:&quot;</span>)<br>print(s)<br></code></pre></td></tr></table></figure><h3 id="Concatenation-（连接算符）"><a href="#Concatenation-（连接算符）" class="headerlink" title="Concatenation （连接算符）"></a>Concatenation （连接算符）</h3><p><code>print(&quot;a&quot;+&quot;b&quot;)</code><br>ab<br><code>print(4 * &#39;2&#39;)</code><br>2222<br><code>print(4 * 2)</code><br>8<br><code>print(&quot;a&quot; * 3)</code><br>aaa</p><h3 id="Int-Function"><a href="#Int-Function" class="headerlink" title="Int Function"></a>Int Function</h3><p><code>print(“2”+”3”)</code><br>23<br><code>print(int(“2”)+int(“3”))</code><br>5<br><code>int(“3”+”4”)</code><br>34</p><h3 id="Type-conversion"><a href="#Type-conversion" class="headerlink" title="Type conversion"></a>Type conversion</h3><ol><li><p>Convert a string into an integer:<br><code>x = int (’12’)</code></p></li><li><p>convert the number into an string:<br><code>x = str(3.5)</code></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a num:&quot;</span>))<br>print(x)<br>y = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter another num:&quot;</span>))<br>print(y)<br>print(x+y) <br></code></pre></td></tr></table></figure><p><code>float(“210”*int(input(“Enter a num:”)))   Num=2</code><br>210210.0</p><h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><p>The only characters that are allowed are letters, numbers, and underscores. Also, they can’t start with numbers.<br>Delete variable:”del”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">spam=“eggs”<br>print(spam*<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>eggseggseggs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x=“This <span class="hljs-keyword">is</span> a string”<br>print(x+”!”)<br></code></pre></td></tr></table></figure><p>This is a string!</p><h3 id="In-place-operators"><a href="#In-place-operators" class="headerlink" title="In-place operators (+=   *=)"></a>In-place operators (+=   *=)</h3><p>x+=5  equals x=x+5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-string">&#x27;a&#x27;</span><br>x+=<span class="hljs-string">&#x27;b&#x27;</span><br>print(x)<br></code></pre></td></tr></table></figure><p>ab</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x=‘a’<br>x*=<span class="hljs-number">3</span><br>print(x)<br></code></pre></td></tr></table></figure><p>aaa</p><h3 id="data-structures"><a href="#data-structures" class="headerlink" title="data structures"></a>data structures</h3><p><strong>lists</strong>, <strong>dictionaries</strong>, <strong>tuples</strong>, <strong>sets</strong></p><blockquote><p>list = [0, 1, “two”]<br>dict = {1: 0, 2: 1, 3: “two”}<br>tuple = (0, 1, “two”)<br>sets={0,1,2}  </p></blockquote><p><strong>When to use a dictionary:</strong></p><ul><li>When you need a logical association between a <strong>key:value</strong> pair.</li><li>When you need fast lookup for your data, based on a custom key.</li><li>When your data is being constantly modified. Remember, dictionaries are mutable.</li></ul><p><strong>When to use the other types:</strong></p><ul><li>Use <strong>lists</strong>if you have a collection of data that does not need random access. Try to choose lists when you need a simple, iterable collection that is modified frequently.</li><li>Use a <strong>set</strong>if you need uniqueness for the elements. </li><li>Use <strong>tuples</strong>when your data cannot change. </li></ul><h1 id="2-Control-Structures"><a href="#2-Control-Structures" class="headerlink" title="2. Control Structures"></a>2. Control Structures</h1><h3 id="Booleans-amp-Comparison"><a href="#Booleans-amp-Comparison" class="headerlink" title="Booleans  &amp; Comparison"></a>Booleans  &amp; Comparison</h3><ul><li><p>== compare values</p></li><li><p>!=  not equal operator</p></li><li><blockquote><p>=    or    &lt;=</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_boolean = <span class="hljs-literal">True</span><br>print(my_boolean)<br></code></pre></td></tr></table></figure><p>True<br><code>print ( 2 == 3)</code><br>False<br><code>1 != 1</code><br>False<br><code>”eleven” != “seven”</code><br>True</p><h3 id="if-Statements"><a href="#if-Statements" class="headerlink" title="if Statements"></a>if Statements</h3><p>indentation（statements空字符）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">5</span>:<br>   print(<span class="hljs-string">&quot;10 greater than 5&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">12</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">5</span>:<br>print(<span class="hljs-string">&quot;Bigger than 5&quot;</span>)<br><span class="hljs-keyword">if</span> num &lt;= <span class="hljs-number">47</span>:<br>print(<span class="hljs-string">&quot;Between 5 and 47&quot;</span>)<br></code></pre></td></tr></table></figure><p>Bigger than 5<br>Between 5 and 47</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">7</span><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">3</span>:<br>print(<span class="hljs-string">&quot;3&quot;</span>)<br><span class="hljs-keyword">if</span> num &lt; <span class="hljs-number">5</span>:<br>print(<span class="hljs-string">&quot;5&quot;</span>)<br><span class="hljs-keyword">if</span> num == <span class="hljs-number">7</span>:<br>print(<span class="hljs-string">&quot;7&quot;</span>)<br></code></pre></td></tr></table></figure><p>3</p><h3 id="else-Statements"><a href="#else-Statements" class="headerlink" title="else Statements"></a>else Statements</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">4</span><br><span class="hljs-keyword">if</span> x == <span class="hljs-number">5</span>:<br>print(<span class="hljs-string">&quot;yes&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>print(<span class="hljs-string">&quot;no&quot;</span>)<br></code></pre></td></tr></table></figure><p>no</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">7</span><br><span class="hljs-keyword">if</span> num == <span class="hljs-number">5</span>:<br>print(<span class="hljs-string">&quot;Number is 5&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">if</span> num == <span class="hljs-number">11</span>:<br>print(<span class="hljs-string">&quot;Number is 11&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">if</span> num == <span class="hljs-number">7</span>:<br>print(<span class="hljs-string">&quot;Number is 7&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>print(<span class="hljs-string">&quot;Number isn&#x27;t 5, 11 or 7&quot;</span>)<br></code></pre></td></tr></table></figure><p>7</p><h3 id="elif-Statements"><a href="#elif-Statements" class="headerlink" title="elif Statements"></a>elif Statements</h3><p>(Short for else if)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">7</span> <br><span class="hljs-keyword">if</span> num == <span class="hljs-number">5</span>:<br>print(<span class="hljs-string">&quot;Number is 5&quot;</span>)<br><span class="hljs-keyword">elif</span> num == <span class="hljs-number">11</span>:<br>print(<span class="hljs-string">&quot;Number is 11&quot;</span>)<br><span class="hljs-keyword">elif</span> num == <span class="hljs-number">7</span>:<br>print(<span class="hljs-string">&quot;Number is 7&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>print(<span class="hljs-string">&quot;Number isn&#x27;t 5,11 or 7&quot;</span>)<br></code></pre></td></tr></table></figure><p>7</p><h3 id="Boolean-logic"><a href="#Boolean-logic" class="headerlink" title="Boolean logic"></a>Boolean logic</h3><ul><li>and or not<br><code>1 == 1 and 2 == 2</code><br>True<br><code>1 == 1 and 2 == 3</code><br>False<br><code>not 1 == 1</code><br>False<br><code>not 1 &gt; 7</code><br>True  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (<span class="hljs-number">2</span> + <span class="hljs-number">2</span> &gt; <span class="hljs-number">3</span>):<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;true&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;false&quot;</span>)<br></code></pre></td></tr></table></figure><p>true</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">True</span>:<br>print(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span>):<br>print(<span class="hljs-string">&quot;2&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>print(<span class="hljs-string">&quot;3&quot;</span>)<br></code></pre></td></tr></table></figure><p>2</p><h3 id="Operator-Precedence（优先）"><a href="#Operator-Precedence（优先）" class="headerlink" title="Operator Precedence（优先）"></a>Operator Precedence（优先）</h3><p>‘= =‘ has a higher precedence than ‘or’<br><code>False == False or True</code><br>True<br><code>False == (False or true)</code><br>False: Means False= =False and False==True, This is of course False<br><code>(False == False) or True</code><br>True<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9dfl76l8j30ig0h10xb.jpg" alt="Screen Shot 2019-06-21 at 3.56.06 PM"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">4</span> <br>y = <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == y <span class="hljs-keyword">or</span> x == <span class="hljs-number">4</span> <span class="hljs-keyword">and</span> <span class="hljs-number">7</span> == <span class="hljs-number">8</span>:<br>print(<span class="hljs-string">&quot;yes&quot;</span>)<br><span class="hljs-keyword">elif</span> x &gt; y:<br>print(<span class="hljs-string">&quot;no&quot;</span>)<br></code></pre></td></tr></table></figure><p>no:<br>{if not True or True and False:}-{if not True or False:}-{if not True:}-{If False:}</p><h3 id="while-Loops"><a href="#while-Loops" class="headerlink" title="while Loops"></a>while Loops</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>print(i)<br>i = i + <span class="hljs-number">1</span><br>print(<span class="hljs-string">&quot;Finished&quot;</span>)<br></code></pre></td></tr></table></figure><p>1    2    3    4    5    Finished</p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>(end a while loop prematurely)    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span>:<br>print(i)<br>i = i + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">5</span>:<br>print(<span class="hljs-string">&quot;Breaking&quot;</span>)<br><span class="hljs-keyword">break</span> <br>print(<span class="hljs-string">&quot;Finished&quot;</span>)<br></code></pre></td></tr></table></figure><p>0 1 2 3 4        Breaking    Finished</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>(continue jumps back to the top of the loop, rather than stopping it.)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>i = i + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-number">2</span>:<br>print(<span class="hljs-string">&quot;Skipping 2&quot;</span>)<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-number">5</span>:<br>print(<span class="hljs-string">&quot;Breaking&quot;</span>)<br><span class="hljs-keyword">break</span> <br>print(i)<br>print(<span class="hljs-string">&quot;Finished&quot;</span>)<br></code></pre></td></tr></table></figure><p>1    Skipping 2    3    4    Breaking    Finished</p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">words = [<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;!&quot;</span>]<br>print(words[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>Hello</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">3</span><br>things = [<span class="hljs-string">&quot;string&quot;</span> , <span class="hljs-number">0</span> ,[ <span class="hljs-number">1</span> , <span class="hljs-number">2</span> , num ], <span class="hljs-number">4.56</span>]<br>print(things[<span class="hljs-number">2</span>])<br>print(things[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>[1, 2, 3]<br>3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;Hello world!&quot;</span><br>print(<span class="hljs-built_in">str</span>[<span class="hljs-number">6</span>])<br></code></pre></td></tr></table></figure><p>w</p><h3 id="List-Operations"><a href="#List-Operations" class="headerlink" title="List Operations"></a>List Operations</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n = [<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>]<br>n[<span class="hljs-number">2</span>] = <span class="hljs-number">5</span><br>print(n)<br></code></pre></td></tr></table></figure><p>[7, 7, 5, 7, 7]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>print(n + [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br>print(n * <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>[1, 2, 3, 4, 5, 6]<br>[1, 2, 3, 1, 2, 3, 1, 2, 3]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">words = [<span class="hljs-string">&quot;spam&quot;</span>,<span class="hljs-string">&quot;egg&quot;</span>,<span class="hljs-string">&quot;spam&quot;</span>,<span class="hljs-string">&quot;sausage&quot;</span>]<br>print(<span class="hljs-string">&quot;spam&quot;</span> <span class="hljs-keyword">in</span> words)<br>print(<span class="hljs-string">&quot;egg&quot;</span> <span class="hljs-keyword">in</span> words)<br>print(<span class="hljs-string">&quot;tomato&quot;</span> <span class="hljs-keyword">in</span> words)<br></code></pre></td></tr></table></figure><p>True<br>True<br>False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>print(<span class="hljs-keyword">not</span> <span class="hljs-number">4</span> <span class="hljs-keyword">in</span> n)<br>print(<span class="hljs-number">4</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> n)<br></code></pre></td></tr></table></figure><p>True<br>True</p><h3 id="List-Functions"><a href="#List-Functions" class="headerlink" title="List Functions"></a>List Functions</h3><ul><li><strong>.append</strong> method<br>This adds an item to the end of an existing list.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>n.append(<span class="hljs-number">4</span>)<br>print(n)<br></code></pre></td></tr></table></figure><p>[1,2,3,4]</p><ul><li><strong>len</strong> function<br>To get the number of items in a list.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]<br>print(<span class="hljs-built_in">len</span>(n))<br></code></pre></td></tr></table></figure><p>5</p><ul><li><strong>.insert</strong> method<br>To insert a new item at any position in the list.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">words = [<span class="hljs-string">&quot;Python&quot;</span>, <span class="hljs-string">&quot;fun&quot;</span>]<br>words.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;is&quot;</span>)<br>print(words)<br></code></pre></td></tr></table></figure><p>[‘Python’,’is’,’fun’]</p><ul><li><strong>index.</strong> method<br>The index method finds the first occurrence of a list item and returns its index.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">letters = [‘p’, ‘q’, ‘r’]<br>print(letters.index(‘r’)）<br>print(letters.index(‘z’)）<br></code></pre></td></tr></table></figure><p>2<br>ValueError: ‘z’ is not in list</p><ul><li><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9dfzjjrfj31a30b1gxu.jpg" alt="FullSizeRender"></li></ul><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p>The range function creates a sequential list of numbers.</p><ol><li>One argument</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>print(n)<br></code></pre></td></tr></table></figure><p>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br>print(n[<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><p>4</p><ol start="2"><li>Two arguments（間隔）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>))<br>print(n)<br>print(<span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>) == <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><p>[3, 4, 5, 6, 7]<br>True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>,<span class="hljs-number">8</span>))<br>print(<span class="hljs-built_in">len</span>(n))<br></code></pre></td></tr></table></figure><p>3</p><ol start="3"><li>Three arguments<br>Third argument determines the interval of the sequence produced.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>,<span class="hljs-number">20</span>,<span class="hljs-number">2</span>))<br>print(n)<br></code></pre></td></tr></table></figure><p>[5, 7, 9, 11, 13, 15, 17, 19]</p><h3 id="for-Loops"><a href="#for-Loops" class="headerlink" title="for Loops"></a>for Loops</h3><ul><li>counter variable</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">words = [<span class="hljs-string">&#x27;Hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>,<span class="hljs-string">&#x27;spam&#x27;</span>,<span class="hljs-string">&#x27;eggs&#x27;</span>]<br>counter = <span class="hljs-number">0</span><br>i = <span class="hljs-built_in">len</span>(words) - <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> counter &lt;= i:<br>a = words[counter]<br>print(a + <span class="hljs-string">&#x27;!&#x27;</span>)<br>counter += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>Hello!<br>world!<br>spam!<br>eggs!</p><ul><li><strong>for in :</strong><br>The for loop is commonly used to repeat some code a certain number of times. </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">words = [<span class="hljs-string">&#x27;Hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>,<span class="hljs-string">&#x27;spam&#x27;</span>,<span class="hljs-string">&#x27;eggs&#x27;</span>]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> words:<br>print(a + <span class="hljs-string">&#x27;!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Hello!<br>world!<br>spam!<br>eggs!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>print(<span class="hljs-string">&#x27;hello!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>hello!<br>hello!<br>hello!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>):<br>print(i)<br></code></pre></td></tr></table></figure><p>0<br>2</p><h1 id="3-Functions-amp-Modules"><a href="#3-Functions-amp-Modules" class="headerlink" title="3. Functions &amp; Modules"></a>3. Functions &amp; Modules</h1><h3 id="def-statement"><a href="#def-statement" class="headerlink" title="def statement"></a>def statement</h3><p>Define your own functions.</p><ol><li>Without arguments</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_func</span>():</span><br>print(<span class="hljs-string">&#x27;spam&#x27;</span>*<span class="hljs-number">3</span>)<br>my_func()<br></code></pre></td></tr></table></figure><p>spamspamspam</p><ol start="2"><li>One argument</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_double</span>(<span class="hljs-params">x</span>):</span><br>print(<span class="hljs-number">2</span> * x)<br>print_double(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_function</span>(<span class="hljs-params">word</span>):</span><br>print(word + <span class="hljs-string">&#x27;!&#x27;</span>)<br>my_function(<span class="hljs-string">&#x27;World&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Hello!</p><ol start="3"><li>Two arguments</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_sum_twice</span>(<span class="hljs-params">x, y</span>):</span><br>print(x + y)<br>print(x + y)<br>print_sum_twice(<span class="hljs-number">5</span>, <span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>13<br>13</p><h3 id="Return-Statement"><a href="#Return-Statement" class="headerlink" title="Return Statement"></a>Return Statement</h3><p>Certain functions, such as <em>int</em>or <em>str</em>, return a value that can be used later. Once you return a value from a function, it immediately stops being executed. Any code after the <em>return</em>statement will never happen.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max</span>(<span class="hljs-params">x, y</span>):</span><br><span class="hljs-keyword">if</span> x &gt;= y:<br><span class="hljs-keyword">return</span> x<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> y<br>print(<span class="hljs-built_in">max</span>(<span class="hljs-number">4</span>,<span class="hljs-number">7</span>))<br>z = <span class="hljs-built_in">max</span>(<span class="hljs-number">8</span>,<span class="hljs-number">5</span>)<br>print(z)<br></code></pre></td></tr></table></figure><p>7<br>8</p><h3 id="Docstrings"><a href="#Docstrings" class="headerlink" title="Docstrings"></a>Docstrings</h3><p>Documentation strings.You can access the docstrings through the run time using the syntax: funcName.<strong>doc</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printMax</span>(<span class="hljs-params">x, y</span>):</span><br><span class="hljs-string">&#x27;&#x27;&#x27;jiang </span><br><span class="hljs-string">yuxuan&#x27;&#x27;&#x27;</span><br>x = <span class="hljs-built_in">int</span>(x)<br>y = <span class="hljs-built_in">int</span>(y)<br><span class="hljs-keyword">if</span> x &gt; y:<br>print(x)<br><span class="hljs-keyword">else</span>:<br>print(y)<br>printMax(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>print(printMax.__doc__) <br></code></pre></td></tr></table></figure><p>5<br>jiang<br>    yuxuan</p><h3 id="Functions-as-Objects"><a href="#Functions-as-Objects" class="headerlink" title="Functions as Objects"></a>Functions as Objects</h3><ol><li>Functions are just like any other kind of value.<br>They can be assigned and reassigned to variables, and later referenced by those names.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shout</span>(<span class="hljs-params">word</span>):</span><br><span class="hljs-keyword">return</span> word + <span class="hljs-string">&#x27;!&#x27;</span><br>speak = shout<br>output = speak(<span class="hljs-string">&#x27;shout&#x27;</span>)<br>print(output)<br></code></pre></td></tr></table></figure><p>shout!</p><ol start="2"><li>Functions can also be used as arguments of other functions.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">4.</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>):</span><br><span class="hljs-keyword">return</span> x + y<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_twice</span>(<span class="hljs-params">func, x, y</span>):</span><br><span class="hljs-keyword">return</span> func(func(x, y), func(x, y))<br>a = <span class="hljs-number">5</span><br>b = <span class="hljs-number">10</span><br>print(do_twice(add, a, b))<br></code></pre></td></tr></table></figure><p>30(return add(add(a, b), add(a, b) )</p><h3 id="Modules（模块）"><a href="#Modules（模块）" class="headerlink" title="Modules（模块）"></a>Modules（模块）</h3><ol><li><strong>import</strong><br>The basic way to use a module is to add <em>import module_name</em> at the top of your code, and then using <em>module_name.var</em>to access functions and values with the name <em>var</em>in the module.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>value = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>print(value)<br></code></pre></td></tr></table></figure><p>从1到6随机生成5个数</p><ol start="2"><li><strong>from…import</strong><br>There is another kind of <em>import</em>that can be used if you only need certain functions from a module.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi<br>print(pi)<br></code></pre></td></tr></table></figure><p>3.14159265359</p><ol start="3"><li><strong>as</strong><br>You can import a module or object under a different name using the <em>as</em> keyword. This is mainly used when a module or object has a long or confusing name.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt <span class="hljs-keyword">as</span> square_root<br>print(square_root(<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><p>10.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math <span class="hljs-keyword">as</span> m<br>print(m.sqrt(<span class="hljs-number">25</span>))<br></code></pre></td></tr></table></figure><p>5</p><h1 id="4-Exceptions-amp-Files"><a href="#4-Exceptions-amp-Files" class="headerlink" title="4. Exceptions &amp; Files"></a>4. Exceptions &amp; Files</h1><h3 id="try-except-statement"><a href="#try-except-statement" class="headerlink" title="try/except statement"></a>try/except statement</h3><ol><li>If<em>try</em> part executed correctly, <em>except</em> part will be ignored.If any error in<em>try</em> part, it will still  run until error happened. when error happened, the rest of <em>try</em> part will be ignored, and then jump into <em>except</em> part immediately.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>variable = <span class="hljs-number">10</span><br>print(<span class="hljs-number">10</span> / <span class="hljs-number">2</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>print(<span class="hljs-string">&#x27;Error&#x27;</span>)<br>print(<span class="hljs-string">&#x27;Finished&#x27;</span>)<br></code></pre></td></tr></table></figure><p>5.0<br>Finished</p><ol start="2"><li>A <em>try</em>statement can have multiple different <em>except</em>blocks to handle different exceptions.Multiple exceptions can also be put into a single <em>except</em> block using parentheses, to have the <em>except</em> block handle all of them.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>variable = <span class="hljs-number">10</span><br>print(variable + <span class="hljs-string">&#x27;hello&#x27;</span>)<br>print(variable / <span class="hljs-number">2</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>print(<span class="hljs-string">&#x27;Divided by zero&#x27;</span>)<br><span class="hljs-keyword">except</span>(ValueError, TypeError):<br>print(<span class="hljs-string">&#x27;Error occurred&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Error occurred</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>meaning = <span class="hljs-number">42</span><br>print(meaning / <span class="hljs-number">0</span>)<br>print(<span class="hljs-string">&#x27;the meaning of life&#x27;</span>)<br><span class="hljs-keyword">except</span>(ValueError, TypeError):<br>print(<span class="hljs-string">&#x27;ValueError or TypeError occurred&#x27;</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>print(<span class="hljs-string">&#x27;Divided by zero&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Divided by zero</p><ol start="3"><li>An <em>except</em> statement without any exception specified will catch all errors. These should be used sparingly, as they can catch unexpected errors and hide programming mistakes.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>word = <span class="hljs-string">&#x27;spam&#x27;</span><br>print(word / <span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span>:<br>print(<span class="hljs-string">&#x27;An error occurred&#x27;</span>)<br></code></pre></td></tr></table></figure><p>An error occurred</p><h3 id="finally-statement"><a href="#finally-statement" class="headerlink" title="finally statement"></a>finally statement</h3><p>No matter what happened(at both situations), the<em>finally</em> part always run. (even some error also happened in <em>except</em> part…)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>print(<span class="hljs-number">1</span>)<br>print(<span class="hljs-number">2</span>/<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span>:<br>print(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">finally</span>:<br>print(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>1<br>2<br>3</p><h3 id="Raising-Exceptions"><a href="#Raising-Exceptions" class="headerlink" title="Raising Exceptions"></a>Raising Exceptions</h3><ol><li>You can raise exceptions by using the <em>raise</em>statement.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">raise</span> ValueError<br>print(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>1<br>ValueError</p><ol start="2"><li>Exceptions can be raised with arguments that give detail about them.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&#x27;Invalid name!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>NameError: Invalid name!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;:&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">float</span>(num) &lt; <span class="hljs-number">0</span>:<br><span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Negative!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Raise a ValueError exception, if the input is negative.</p><ol start="3"><li>In <em>except</em> blocks, the <em>raise</em> statement can be used without arguments to re-raise whatever exception occurred.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>num = <span class="hljs-number">5</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span>:<br>   print(<span class="hljs-string">&quot;An error occurred&quot;</span>)<br>   <span class="hljs-keyword">raise</span><br></code></pre></td></tr></table></figure><p>An error occurred<br>ZeroDivisionError: division by zero</p><h3 id="assert-statement（断言）"><a href="#assert-statement（断言）" class="headerlink" title="assert statement（断言）"></a>assert statement（断言）</h3><p>=raise-if-not</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-number">2</span> + <span class="hljs-number">2</span> == <span class="hljs-number">4</span><br>print(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span><br>print(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>1<br>2<br>AssertionError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> != <span class="hljs-string">&#x27;w&#x27;</span><br>print(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-literal">False</span><br>print(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span><br>print(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">temp = -<span class="hljs-number">10</span><br><span class="hljs-keyword">assert</span>(temp &gt;= <span class="hljs-number">0</span>), ‘Colder then absolute zero!’<br></code></pre></td></tr></table></figure><p>AssertionError: Colder than absolute zero!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    temp = -<span class="hljs-number">10</span><br>    <span class="hljs-keyword">assert</span> (temp &gt;= <span class="hljs-number">0</span>), <span class="hljs-string">&quot;Colder than absolute zero!&quot;</span><br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Error Bypassed&quot;</span>)<br></code></pre></td></tr></table></figure><p>Error Bypassed</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_func</span>(<span class="hljs-params">x</span>):</span><br><span class="hljs-keyword">assert</span> x &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Error!&#x27;</span><br>print(x)<br></code></pre></td></tr></table></figure><p>assert does nothing if x&gt;0 is True and the program continues, if x&gt;0 is False it raises the exception “Error!”</p><h3 id="Opening-Files"><a href="#Opening-Files" class="headerlink" title="Opening Files"></a>Opening Files</h3><ol><li><strong>open</strong>  function<br><code>myfile = open(“filename.txt”)</code></li></ol><blockquote><p>Sending “r” means open in read mode, which is the default. Sending “w” means write mode, for rewriting the contents of a file.<br>Sending “a” means append mode, for adding new content to the end of the file.<br>Adding “b” to a mode opens it in binary mode, which is used for non-text files (such as image and sound files).  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;filename.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-comment"># write mode</span><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;filename.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;filename.txt&quot;</span>)<br><span class="hljs-comment"># read mode</span><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;filename.txt&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br><span class="hljs-comment"># binary write mode</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>close</strong> method<br>Once a file has been opened and used, you should close it.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(‘filename.txt’, ‘w’)<br><span class="hljs-comment"># do stuff to the file</span><br>file.close()<br></code></pre></td></tr></table></figure><h3 id="Reading-Files"><a href="#Reading-Files" class="headerlink" title="Reading Files"></a>Reading Files</h3><ol><li><strong>read</strong> method</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(‘filename.txt’. ‘r’)<br>cont = file.read()<br>print(cont)<br>file.close<br></code></pre></td></tr></table></figure><p>This will print all of the contents of the file “filename.txt”.</p><ol start="2"><li>read method- a certain amount<br>With no argument, read returns the rest of the file.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">ile = <span class="hljs-built_in">open</span>(“filename.txt”, “r”)<br>print(file.read(<span class="hljs-number">16</span>))<br> <span class="hljs-comment"># byte 1-16</span><br>print(file.read(<span class="hljs-number">4</span>))<br> <span class="hljs-comment"># byte 17-20</span><br>print(file.read(<span class="hljs-number">4</span>))<br> <span class="hljs-comment"># byte 21-24</span><br>print(file.read())<br><span class="hljs-comment">#  all the rest</span><br>file.close() close file<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(‘filename.txt’, ‘r’)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>):<br>print(file.read(<span class="hljs-number">4</span>)）<br>file.close()<br></code></pre></td></tr></table></figure><p>This code loops 21 lines. On each line there are 4 bytes. </p><ol start="3"><li>After all contents in a file have been read, any attempts to read further from that file will return an empty string.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(“filename.txt”, “r”)<br>file.read()<br>print(“Re-reading”)<br>print(file.read())<br>print(“Finished”)<br>file.close()<br></code></pre></td></tr></table></figure><p>Re-reading<br>Finished</p><ol start="4"><li><strong>readlines</strong> method<br>To retrieve(检索）each line in a file, you can use the <em>readlines</em>method to return a list in which each element is a line in the file.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(“filename.txt”, “r”)<br>print(file.readlines())<br>file.close()<br></code></pre></td></tr></table></figure><p>[‘Line 1 text \n’, ‘Line 2 text \n’, ‘Line 3 text’]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(“filename.txt”, “r”)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>    print(line)<br>file.close() <br></code></pre></td></tr></table></figure><p>Line 1 text<br>Line 2 text<br>Line 3 text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(<span class="hljs-built_in">open</span>(“test.txt”).readlines())<br><span class="hljs-comment"># If the file test.txt has 7 lines of content</span><br></code></pre></td></tr></table></figure><blockquote><p>There are 7 lines in the file.using the .readlines () method gives us a list where each item in the list is 1 line. The question is asking for the length  (len) of the list. len gives us the quantity of items, rather than the index. Therefore the output would be 7 (the quantity) not 6  (the highest index)  </p></blockquote><h3 id="Writing-Files"><a href="#Writing-Files" class="headerlink" title="Writing Files"></a>Writing Files</h3><ol><li><strong>write</strong> method</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;newfile.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>file.write(<span class="hljs-string">&quot;This has been written to a file&quot;</span>)<br>file.close()<br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;newfile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>print(file.read())<br>file.close()<br></code></pre></td></tr></table></figure><p>This has been written to a file</p><ol start="2"><li><p>When a file is opened in write mode, the file’s existing content is deleted.</p></li><li><p>The write method returns the number of bytes written to a file.<br>file.write(msg) == len(msg)</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">msg = <span class="hljs-string">&quot;Hello world!&quot;</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;newfile.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>amount_written = file.write(msg)<br>print(amount_written)<br>file.close()<br></code></pre></td></tr></table></figure><ol start="12"><li></li></ol><h3 id="Working-with-Files"><a href="#Working-with-Files" class="headerlink" title="Working with Files"></a>Working with Files</h3><ol><li>It is good practice to avoid wasting resources by making sure that files are always closed after they have been used. One way of doing this is to use <em>try</em> and <em>finally</em>.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>   f = <span class="hljs-built_in">open</span>(“filename.txt”)<br>   print(f.read())<br><span class="hljs-keyword">finally</span>:<br>   f.close()<br></code></pre></td></tr></table></figure><p>This ensures that the file is always closed, even if an error occurs.</p><ol start="2"><li><strong>with</strong> statement<br>An alternative way of doing this is using <em>with</em> statements. This creates a temporary variable (often called <em>f</em>), which is only accessible in the indented block of the <em>with</em> statement.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(‘filename.txt) <span class="hljs-keyword">as</span> f:<br>print(f. read())<br></code></pre></td></tr></table></figure><h1 id="5-More-Types"><a href="#5-More-Types" class="headerlink" title="5. More Types"></a>5. More Types</h1><h3 id="None"><a href="#None" class="headerlink" title="None"></a>None</h3><p>The <em>None</em> object is used to represent the absence of a value.The <em>None</em>object is returned by any function that doesn’t explicitly return anything else.<br><code>print(None)</code><br>None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">some_func</span>():</span><br>print(<span class="hljs-string">&#x27;Hi&#x27;</span>)<br>var = some_func()<br></code></pre></td></tr></table></figure><p>Hi</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">some_func</span>():</span><br>print(<span class="hljs-string">&#x27;Hi&#x27;</span>)<br>var = some_func()<br>print(var)<br></code></pre></td></tr></table></figure><p>Hi<br>None</p><blockquote><p>the some_func() doesn’t have a return statement so it’s returning none object. so when var = some_func() is called, some_func is called first(so it prints hi) then it is returning none.  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">foo = print()<br><span class="hljs-keyword">if</span> foo == <span class="hljs-literal">None</span>:<br>print(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>print(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>1</p><blockquote><p>print function always returns nothing, even it has a value between brackets. Because this function only prints value and doesn’t assign value to the variable.<br>x = print()          # print nothing and x has no value<br>x = print(5)        # print 5 and x has no value<br>x = print(“Hi”)   # print Hi and x has no value  </p></blockquote><h3 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h3><ol><li><code>d = &#123;key1 : value1, key2 : value2 &#125;</code><br>key必须是唯一的，但value则不必。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ages = &#123;<span class="hljs-string">&#x27;Dave&#x27;</span>: <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>: <span class="hljs-number">42</span>, <span class="hljs-string">&#x27;John&#x27;</span>: <span class="hljs-number">58</span>&#125;<br>print(ages[<span class="hljs-string">&#x27;Dave&#x27;</span>])<br></code></pre></td></tr></table></figure><p>24</p><ol start="2"><li>Trying to index a key that isn’t part of the dictionary returns a KeyError.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">primary = &#123;<br><span class="hljs-string">&#x27;red&#x27;</span>: [<span class="hljs-number">250</span>, <span class="hljs-number">0</span> , <span class="hljs-number">0</span>],<br><span class="hljs-string">&#x27;green&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>],<br><span class="hljs-string">&#x27;blue&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>]<br>&#125;<br>print(primary[<span class="hljs-string">&#x27;red&#x27;</span>])<br>print(primary[<span class="hljs-string">&#x27;yellow&#x27;</span>])<br></code></pre></td></tr></table></figure><p>[255, 0, 0]<br>KeyError: ‘yellow’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">test = &#123;&#125;<br>print(test[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>keyError<br>(test = {} # it means that key and value are both empty, but the dictionary still exist.<br>print(test[0]) # we index the key “0”, which is not in “test”)</p><ol start="3"><li>Trying to use a mutable（可变的） object as a dictionary key causes a TypeError. </li></ol><blockquote><p>Here’s the list of class that are immutable:<br>Bool    int    float        tuple    str     frozen set<br>And Here’s the list of class that are mutable:<br>list        set          dict  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">bad_dict = &#123;<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:<span class="hljs-string">&#x27;one two three&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>TypeError: unhashable type: ‘list’</p><h3 id="Dictionary-Functions"><a href="#Dictionary-Functions" class="headerlink" title="Dictionary Functions"></a>Dictionary Functions</h3><ol><li>Just like lists, dictionary keys can be assigned to different values. However, unlike lists, a new dictionary key can also be assigned a value, not just ones that already exist.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = &#123;<span class="hljs-number">1</span>: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>: <span class="hljs-number">4</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-number">16</span>,&#125;<br>squares[<span class="hljs-number">8</span>] = <span class="hljs-number">64</span><br>squares[<span class="hljs-number">3</span>] = <span class="hljs-number">9</span><br>print(squares)<br></code></pre></td></tr></table></figure><p>{1: 1, 2: 4, 3: 9, 4: 16, 8: 64}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">primes = &#123;<span class="hljs-number">1</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>: <span class="hljs-number">3</span>, <span class="hljs-number">4</span>: <span class="hljs-number">7</span>, <span class="hljs-number">7</span>: <span class="hljs-number">17</span>&#125;<br>print(primes[primes[<span class="hljs-number">4</span>]])<br></code></pre></td></tr></table></figure><p>17</p><ol start="2"><li><strong>in / not in</strong><br>To determine whether a key is in a dictionary, you can use <em>in</em> and <em>not in</em>, just as you can for a list.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">n = &#123;<br><span class="hljs-number">1</span>: <span class="hljs-string">&#x27;one&#x27;</span>,<br><span class="hljs-number">2</span>: <span class="hljs-string">&#x27;two&#x27;</span>,<br><span class="hljs-number">3</span>: <span class="hljs-string">&#x27;three&#x27;</span><br>&#125;<br>print(<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> n)<br>print(<span class="hljs-string">&#x27;three&#x27;</span> <span class="hljs-keyword">in</span> n)<br>print(<span class="hljs-number">4</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> n)<br></code></pre></td></tr></table></figure><p>True<br>False<br>True</p><ol start="3"><li><strong>get</strong><br>It does the same thing as indexing, but if the key is not found in the dictionary it returns another specified value instead (‘None’, by default).</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">pairs = &#123;<br><span class="hljs-number">1</span>: <span class="hljs-string">&#x27;apple&#x27;</span>,<br><span class="hljs-string">&#x27;orange&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br><span class="hljs-literal">True</span>: <span class="hljs-literal">False</span>,<br><span class="hljs-literal">None</span>: <span class="hljs-string">&#x27;True&#x27;</span><br>&#125;<br>print(pairs.get(<span class="hljs-string">&#x27;orange&#x27;</span>))<br>print(pairs.get(<span class="hljs-number">7</span>))<br>print(pairs.get(<span class="hljs-number">12345</span>, <span class="hljs-string">&#x27;not in dictionary&#x27;</span>))<br></code></pre></td></tr></table></figure><p>[2, 3, 4]<br>None<br>not in dictionary<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gg9dgl4a75j30jm09lgnf.jpg" alt="Screen Shot 2019-06-26 at 3.15.53 PM"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fib</span> = &#123;<span class="hljs-number">1</span>: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>: <span class="hljs-number">1</span>, <span class="hljs-number">3</span>: <span class="hljs-number">2</span>, <span class="hljs-number">4</span>: <span class="hljs-number">3</span>&#125;<br><span class="hljs-attribute">print</span>(fib.get(<span class="hljs-number">4</span>, <span class="hljs-number">0</span>) + fib.get(<span class="hljs-number">7</span>, <span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><p>8    ::mark::</p><h3 id="Tuples（多元组）"><a href="#Tuples（多元组）" class="headerlink" title="Tuples（多元组）"></a>Tuples（多元组）</h3><ol><li>Tuples are very similar to lists, except that they are immutable (they cannot be changed). Tuples are faster than lists, but they cannot be changed.</li></ol><blockquote><p>list = [0, 1, “two”]<br>dict = {1: 0, 2: 1, 3: “two”}<br>tuple = (0, 1, “two”)  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">words = (<span class="hljs-string">&#x27;spam&#x27;</span>, <span class="hljs-string">&#x27;eggs&#x27;</span>, <span class="hljs-string">&#x27;sausages&#x27;</span>)<br>print(words[<span class="hljs-number">0</span>])<br>words[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;cheese&#x27;</span><br></code></pre></td></tr></table></figure><p>spam<br>TypeError: tuple object does not support item assignment.</p><blockquote><p>Trying to reassign a value in a tuple causes a TypeError.  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">tuple</span> = (<span class="hljs-number">1</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>print(<span class="hljs-built_in">tuple</span>[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>(1, 2, 3)</p><ol start="2"><li>Tuples can be created without the parentheses by just separating the values with commas.<br><code>empty_tuple = ()</code><br>An empty tuple is created using an empty parenthesis pair.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_tuple = <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span><br>print(my_tuple[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>one</p><h3 id="List-Slices"><a href="#List-Slices" class="headerlink" title="List Slices"></a>List Slices</h3><ol><li>通过slice可以返回一个包括分隔范围内所有列表索引对应值的新列表。列表索引从0开始，slice中的第一个索引数字的对应值是包括在结果中的，而第二个索引数字的对应值则没有。slice长度等于第二个索引数字减第一个索引数字。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>print(<span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>])<br>print(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>[2, 3, 4, 5]<br>[0]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">25</span>,<span class="hljs-number">36</span>,<span class="hljs-number">49</span>,<span class="hljs-number">64</span>]<br>print(squares[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>])<br></code></pre></td></tr></table></figure><p>[16, 25, 36]</p><ol start="2"><li>omit<br>如果slice中第一个索引数字被省略，则slice得到的新列表从原列表的0索引开始。如果第二个索引数字省略，则从第一个索引数字处一直取到原列表结束。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>print(squares[:<span class="hljs-number">6</span>])<br>print(squares[<span class="hljs-number">6</span>:])<br></code></pre></td></tr></table></figure><p>[0, 1, 2, 3, 4, 5]<br>[6, 7, 8, 9]</p><ol start="3"><li>step<br>list slice可以有第三个数字，用来表示步长，必须是小于列表长度的值。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>print(<span class="hljs-built_in">list</span>[::<span class="hljs-number">2</span>])<br>print(<span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:<span class="hljs-number">8</span>:<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>[0, 2, 4, 6, 8]<br>[2, 5]    [2,8)取不到8th</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">25</span>,<span class="hljs-number">36</span>,<span class="hljs-number">49</span>,<span class="hljs-number">64</span>,<span class="hljs-number">81</span>]<br>print(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>::<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><p>[1, 25, 81]</p><ol start="4"><li>negative<br>如果list slice中索引数字有负数，则表示从后往前数。 [::-1] 可以实现一个列表的反序。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>print(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>[1, 2, 3, 4, 5, 6, 7, 8]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>print(<span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:-<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>[2, 3, 4, 5, 6, 7]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">25</span>,<span class="hljs-number">36</span>,<span class="hljs-number">49</span>,<span class="hljs-number">64</span>,<span class="hljs-number">81</span>]<br>print(<span class="hljs-built_in">list</span>[<span class="hljs-number">7</span>:<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>[49, 36]</p><h3 id="List-Comprehensions"><a href="#List-Comprehensions" class="headerlink" title="List Comprehensions"></a>List Comprehensions</h3><ol><li>List comprehensions  are a useful way of quickly creating lists whose contents obey a simple rule.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n=[i**<span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>print(n)<br></code></pre></td></tr></table></figure><p>[0, 1, 8, 27]</p><ol start="2"><li>A list comprehension can also contain an <strong>if</strong> statement to enforce a condition on values in the list.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">n=[i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i**<span class="hljs-number">2</span> % <span class="hljs-number">2</span> ==<span class="hljs-number">0</span>]<br>print(n)<br></code></pre></td></tr></table></figure><p>[0, 4, 16, 36, 64]</p><h3 id="String-Formatting"><a href="#String-Formatting" class="headerlink" title="String Formatting"></a>String Formatting</h3><ol><li>String formatting provides a more powerful way to embed non-strings within strings. String formatting uses a string’s format method to substitute a number of arguments in the string.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&#x27;numbers=&#123;0&#125;&#123;1&#125;&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)<br>print(a)<br></code></pre></td></tr></table></figure><p>numbers=454</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&#x27;numbers:&#123;&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(n[<span class="hljs-number">0</span>],n[<span class="hljs-number">1</span>],n[<span class="hljs-number">2</span>])<br>print(a)<br>b=<span class="hljs-string">&#x27;numbers:&#123;2&#125;&#123;0&#125;&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(n[<span class="hljs-number">0</span>],n[<span class="hljs-number">1</span>],n[<span class="hljs-number">2</span>])<br>print(b)<br></code></pre></td></tr></table></figure><p>numbers:456<br>numbers:644<br><code>print(&quot;&#123;0&#125;&#123;1&#125;&#123;0&#125;&quot;.format(&quot;abra&quot;, &quot;cad”))</code><br>abracadabra</p><ol start="2"><li>String formatting can also be done with named arguments.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;&#123;x&#125;, &#123;y&#125;&quot;</span>.<span class="hljs-built_in">format</span>(x=<span class="hljs-number">5</span>, y=<span class="hljs-number">12</span>)<br>print(a)<br></code></pre></td></tr></table></figure><p>5, 12<br>ps:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-number">5</span><br>y=<span class="hljs-number">12</span><br>print(<span class="hljs-built_in">str</span>(x)+<span class="hljs-string">&#x27;,&#x27;</span>+<span class="hljs-built_in">str</span>(y))<br></code></pre></td></tr></table></figure><p>5,12</p><h3 id="String-Functions"><a href="#String-Functions" class="headerlink" title="String Functions"></a>String Functions</h3><ul><li><p><strong>join</strong><br>joins a list of strings with another string as a separator.<br><code>pprint(&#39;-&#39;.join([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]))</code><br>a-b-c</p></li><li><p><strong>split</strong><br><code>print(&#39;a b c&#39;.split())</code><br>[‘a’, ‘b’, ‘c’]</p></li><li><p><strong>replace</strong><br>replaces one substring in a string with another.<br><code>print(&#39;a b c&#39;.replace(‘c’,’d’))</code><br>a b d</p></li><li><p><strong>startswith</strong> / <strong>endswith</strong><br>determine if there is a substring at the start and end of a string, respectively. </p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&#x27;a b c&#x27;</span>.startswith(<span class="hljs-string">&#x27;a&#x27;</span>))<br>print(<span class="hljs-string">&#x27;a b c&#x27;</span>.endswith(<span class="hljs-string">&#x27;b&#x27;</span>))<br></code></pre></td></tr></table></figure><p>True<br>False</p><ul><li><strong>upper</strong> / <strong>lower</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">print(‘abc’.upper())<br>print(<span class="hljs-string">&#x27;ABC’.lower())</span><br></code></pre></td></tr></table></figure><p>ABC<br>abc</p><h3 id="Numeric-Functions"><a href="#Numeric-Functions" class="headerlink" title="Numeric Functions"></a>Numeric Functions</h3><ul><li><strong>max</strong> / <strong>min</strong> / <strong>sum</strong> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>print(<span class="hljs-built_in">max</span>(n))<br>print(<span class="hljs-built_in">min</span>(n))<br>print(<span class="hljs-built_in">sum</span>(n))<br></code></pre></td></tr></table></figure><p>4<br>0<br>13</p><ul><li><strong>abs</strong><br>To find the distance of a number from zero (its absolute value).<br><code>print(abs(-5))</code><br>5</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-built_in">min</span>([<span class="hljs-built_in">sum</span>([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>]), <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(-<span class="hljs-number">30</span>), <span class="hljs-number">2</span>)])<br>print(a)<br></code></pre></td></tr></table></figure><p>30</p><ul><li><strong>round</strong><br>To round a number to a certain number of decimal places.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">1.316</span><br>print(<span class="hljs-built_in">round</span>(n))<br>print(<span class="hljs-built_in">round</span>(n,<span class="hljs-number">1</span>))<br>print(<span class="hljs-built_in">round</span>(n,<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>1<br>1.3<br>1.32</p><h3 id="List-Functions-1"><a href="#List-Functions-1" class="headerlink" title="List Functions"></a>List Functions</h3><ul><li><strong>all</strong> / <strong>any</strong><br>Often used in conditional statements, <strong>all</strong> and <strong>any</strong> take a list as an argument, and return True if <strong>all</strong> or <strong>any</strong> (respectively) of their arguments evaluate to <strong>True</strong> (and <strong>False</strong> otherwise).  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n=[<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>([i&gt;<span class="hljs-number">10</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n]):<br>print(<span class="hljs-string">&#x27;All larger than 10&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>([i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n]):<br>print(<span class="hljs-string">&#x27;At least one is even&#x27;</span>)<br></code></pre></td></tr></table></figure><p>All larger than 10<br>At least one is even</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">5</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>([<span class="hljs-built_in">abs</span>(i) &lt; <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums]):<br>  print(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>  print(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>2</p><ul><li><strong>enumerate</strong><br>The function enumerate can be used to iterate through the values and indices of a list simultaneously.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n=[<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(n):<br>print(i)<br></code></pre></td></tr></table></figure><p>(0, 11)<br>(1, 22)<br>(2, 33)<br>(3, 44)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n=[<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(n,-<span class="hljs-number">2</span>):<br>print(i)<br></code></pre></td></tr></table></figure><p>(-2, 11)<br>(-1, 22)<br>(0, 33)<br>(1, 44)</p><h1 id="6-Functional-Programming"><a href="#6-Functional-Programming" class="headerlink" title="6.Functional Programming"></a>6.Functional Programming</h1><h3 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">apply_twice</span>(<span class="hljs-params">func, arg</span>):</span><br>   <span class="hljs-keyword">return</span> func(func(arg))<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_five</span>(<span class="hljs-params">x</span>):</span><br>   <span class="hljs-keyword">return</span> x + <span class="hljs-number">5</span><br>print(apply_twice(add_five, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p>20</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">func, arg</span>):</span><br>  <span class="hljs-keyword">return</span> func(func(arg))<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mult</span>(<span class="hljs-params">x</span>):</span><br>  <span class="hljs-keyword">return</span> x * x<br>print(test(mult, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>16</p><h2 id="Pure-Functions"><a href="#Pure-Functions" class="headerlink" title="Pure Functions"></a>Pure Functions</h2><p>Pure functions have no side effects, and return a value that depends only on their arguments.</p><ul><li>pure functions:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pure_function</span>(<span class="hljs-params">x, y</span>):</span><br>  temp = x + <span class="hljs-number">2</span>*y<br>  <span class="hljs-keyword">return</span> temp / (<span class="hljs-number">2</span>*x + y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">x</span>):</span><br>  y = x**<span class="hljs-number">2</span><br>  z = x + y<br>  <span class="hljs-keyword">return</span> z<br></code></pre></td></tr></table></figure><ul><li>impure functions:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ome_list = []<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">impure</span>(<span class="hljs-params">arg</span>):</span><br>  some_list.append(arg)<br></code></pre></td></tr></table></figure><p>it changed the state of some_list</p><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><ol><li>Generators are a type of iterable, like lists or tuples. Unlike lists, they don’t allow indexing with arbitrary indices, but they can still be iterated through with for loops. They can be created using functions and the yield statement.<br>The <strong>yield</strong> statement is used to define a generator, replacing the <strong>return</strong> of a function to provide a result to its caller without destroying local variables.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">countdown</span>():</span><br>  i=<span class="hljs-number">5</span><br>  <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">yield</span> i<br>    i -= <span class="hljs-number">1</span> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> countdown():<br>  print(i)<br></code></pre></td></tr></table></figure><p>5<br>4<br>3<br>2<br>1</p><ol start="2"><li>Due to the fact that they yield one item at a time, generators don’t have the memory restrictions of lists. In fact, they can be infinite!</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">infinite_sevens</span>():</span><br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">7</span>   <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> infinite_sevens():<br>  print(i)<br></code></pre></td></tr></table></figure><p>7<br>7<br>…</p><ol start="3"><li>Finite generators can be converted into lists by passing them as arguments to the list function.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numbers</span>(<span class="hljs-params">x</span>):</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">yield</span> i<br>print(<span class="hljs-built_in">list</span>(numbers(<span class="hljs-number">11</span>)))<br></code></pre></td></tr></table></figure><p>[0, 2, 4, 6, 8, 10]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_word</span>():</span><br>  word = <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;spam&quot;</span>:<br>    word +=ch<br>    <span class="hljs-keyword">yield</span> word<br>print(<span class="hljs-built_in">list</span>(make_word()))<br></code></pre></td></tr></table></figure><p>[‘s’, ‘sp’, ‘spa’, ‘spam’]</p><h3 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h3><ol><li>Decorators provide a way to modify functions using other functions. This is ideal when you need to extend the functionality of functions that you don’t want to modify.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decor</span>(<span class="hljs-params">func</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrap</span>():</span><br>    print(<span class="hljs-string">&quot;============&quot;</span>)<br>    func()<br>    print(<span class="hljs-string">&quot;============&quot;</span>)<br>  <span class="hljs-keyword">return</span> wrap<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_text</span>():</span><br>  print(<span class="hljs-string">&quot;Hello world!&quot;</span>)<br>decorated = decor(print_text)<br>decorated()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">print_text = decor(print_text)<br>print_text()<br></code></pre></td></tr></table></figure><p>============</p><h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h1><ol start="2"><li>Python provides support to wrap a function in a decorator by pre-pending the function definition with a decorator name and the @ symbol.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decor</span>(<span class="hljs-params">func</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrap</span>():</span><br>        print(<span class="hljs-string">&quot;============&quot;</span>)<br>        func()<br>        print(<span class="hljs-string">&quot;============&quot;</span>)<br>    <span class="hljs-keyword">return</span> wrap<br><span class="hljs-meta">@decor</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_text</span>():</span><br>    print(<span class="hljs-string">&quot;Hello world!&quot;</span>)<br><span class="hljs-meta">@decor</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_text2</span>():</span><br>    print(<span class="hljs-string">&quot;This is my world&quot;</span>)<br>print_text()<br>print_text2()<br></code></pre></td></tr></table></figure><p>============</p><h1 id="Hello-world-1"><a href="#Hello-world-1" class="headerlink" title="Hello world!"></a>Hello world!</h1><p>============</p><h1 id="This-is-my-world"><a href="#This-is-my-world" class="headerlink" title="This is my world"></a>This is my world</h1><h3 id="Recursion（递归）"><a href="#Recursion（递归）" class="headerlink" title="Recursion（递归）"></a>Recursion（递归）</h3><ol><li>A classic example of a function that is implemented recursively is the factorial function, which finds the product of all positive integers below a specified number. For example, 5! (5 factorial) is 5 * 4 * 3 * 2 * 1 (120). To implement this recursively, notice that 5! = 5 * 4!, 4! = 4 * 3!, 3! = 3 * 2!, and so on. Generally, n! = n * (n-1)!. </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">abc</span>(<span class="hljs-params">x</span>):</span><br><span class="hljs-keyword">if</span> x == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> x * abc(x-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span> (abc(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><p>120(5<em>4</em>3<em>2</em>1)</p><ol start="2"><li>Recursive functions can be infinite, just like infinite while loops. These often occur when you forget to implement the base case. </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum_to</span>(<span class="hljs-params">x</span>):</span><br><span class="hljs-keyword">return</span> x+sum_to(x-<span class="hljs-number">1</span>)<br>print(sum_to(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><p>RuntimeError: maximum recursion depth exceeded</p><ol start="3"><li>Recursion can also be indirect. One function can call a second, which calls the first, which calls the second, and so on. This can occur with any number of functions.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">x</span>):</span><br>  <span class="hljs-keyword">if</span> x == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> x == <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">else</span>: <br>    <span class="hljs-keyword">return</span> fib(x-<span class="hljs-number">1</span>) + fib(x-<span class="hljs-number">2</span>)<br>print(fib(<span class="hljs-number">4</span>))<br><br></code></pre></td></tr></table></figure><p>5</p><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><ol><li>Sets are data structures, similar to lists or dictionaries. They are created using curly braces, or the set function. They share some functionality with lists, such as the use of in to check whether they contain a particular item.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">num_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>word_set = <span class="hljs-built_in">set</span>([<span class="hljs-string">&quot;spam&quot;</span>, <span class="hljs-string">&quot;eggs&quot;</span>, <span class="hljs-string">&quot;sausage&quot;</span>])<br>print(<span class="hljs-number">3</span> <span class="hljs-keyword">in</span> num_set)<br>print(<span class="hljs-string">&quot;spam&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> word_set)<br></code></pre></td></tr></table></figure><p>True<br>False</p><ol start="2"><li>Instead of using <strong>append</strong>to add to a set, use <strong>add</strong>. The method <strong>remove</strong>removes a specific element from a set; <strong>pop</strong>removes an arbitrary element.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br>nums.add(-<span class="hljs-number">7</span>)<br>nums.remove(<span class="hljs-number">3</span>)<br>print(nums)<br></code></pre></td></tr></table></figure><p>{1, 2, 4, 5, 6, -7}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n=&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;<br>n.add(<span class="hljs-string">&#x27;d&#x27;</span>)<br>print(<span class="hljs-built_in">len</span>(n))<br></code></pre></td></tr></table></figure><p>4</p><ol start="3"><li>Sets can be combined using mathematical operations.<br>The <strong>union</strong>operator <strong>|</strong> combines two sets to form a new one containing items in either.<br>The <strong>intersection</strong>operator <strong>&amp;</strong> gets items only in both.<br>The <strong>difference</strong>operator <strong>-</strong> gets items in the first set but not in the second.<br>The <strong>symmetric difference</strong> operator <strong>^</strong> gets items in either set, but not both.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">first = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br>second = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>print(first | second)<br>print(first &amp; second)<br>print(first - second)<br>print(second - first)<br>print(first ^ second)<br></code></pre></td></tr></table></figure><p>1, 2, 3, 4, 5, 6, 7, 8, 9}<br>{4, 5, 6}<br>{1, 2, 3}<br>{8, 9, 7}<br>{1, 2, 3, 7, 8, 9}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>b = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>print(a &amp; b)<br></code></pre></td></tr></table></figure><p>{3}</p><h3 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h3><ol><li>The module <strong>itertools</strong> is a standard library that contains several functions that are useful in functional programming.<br>One type of function it produces is infinite iterators.<br>The function <strong>count</strong> counts up infinitely from a value.<br>The function <strong>cycle</strong> infinitely iterates through an iterable (for instance a list or string).<br>The function <strong>repeat</strong>repeats an object, either infinitely or a specific number of times.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> count<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> count(<span class="hljs-number">3</span>):<br>print(i)<br><span class="hljs-keyword">if</span> i&gt;=<span class="hljs-number">11</span>:<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p><ol start="2"><li>There are many functions in <strong>itertools</strong> that operate on iterables, in a similar way to <strong>map</strong>and <strong>filter</strong>.<br>Some examples:<br><strong>takewhile -</strong> takes items from an iterable while a predicate function remains true;<br><strong>chain -**combines several iterables into one long one;<br>**accumulate -</strong> returns a running total of values in an iterable.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> accumulate, takewhile<br>n=<span class="hljs-built_in">list</span>(accumulate(<span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)))<br>print(n)<br>print(<span class="hljs-built_in">list</span>(takewhile(<span class="hljs-keyword">lambda</span> x:x&lt;=<span class="hljs-number">6</span>,n)))<br></code></pre></td></tr></table></figure><p>[0, 1, 3, 6, 10, 15, 21, 28]    (0+1,1+2,3+3,6+4,10+5,15+6…)<br>[0, 1, 3, 6]</p><ol start="3"><li><strong>product</strong> and <strong>permutation</strong><br>These are used when you want to accomplish a task with all possible combinations of some items.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product, permutations<br>letters = (<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>)<br>print(<span class="hljs-built_in">list</span>(product(letters, <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>))))<br>print(<span class="hljs-built_in">list</span>(permutations(letters))) <br></code></pre></td></tr></table></figure><p>[(‘A’, 0), (‘A’, 1), (‘B’, 0), (‘B’, 1)]<br>[(‘A’, ‘B’), (‘B’, ‘A’)]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br>a=&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>print(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(product(<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>), a))))<br></code></pre></td></tr></table></figure><p>6</p><h1 id="7-Object-Oriented-Programming"><a href="#7-Object-Oriented-Programming" class="headerlink" title="7. Object-Oriented Programming"></a>7. Object-Oriented Programming</h1><h3 id="面向对象技术简介"><a href="#面向对象技术简介" class="headerlink" title="面向对象技术简介"></a>面向对象技术简介</h3><p><strong>类(Class)</strong>: 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。<br><strong>方法</strong>：类中定义的函数。<br><strong>类变量</strong>：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。<br><strong>数据成员</strong>：类变量或者实例变量用于处理类及其实例对象的相关的数据。<br><strong>方法重写</strong>：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。<br><strong>局部变量</strong>：定义在方法中的变量，只作用于当前实例的类。<br><strong>实例变量</strong>：在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。<br><strong>继承</strong>：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。<br><strong>实例化</strong>：创建一个类的实例，类的具体对象。<br><strong>对象</strong>：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</p><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassName</span>:</span><br>    &lt;statement-<span class="hljs-number">1</span>&gt;<br>    .<br>    &lt;statement-N&gt;<br></code></pre></td></tr></table></figure><p>类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。</p><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><p>类对象支持两种操作：属性引用和实例化。属性引用使用和 Python 中所有的属性引用一样的标准语法：obj.name。类对象创建后，类命名空间中所有的命名都是有效属性名。所以如果类定义是这样:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>:</span><br>    “””一个简单的类实例”””<br>    i = <span class="hljs-number">12345</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> ‘hello world<span class="hljs-string">&#x27;</span><br><span class="hljs-string"> </span><br><span class="hljs-string"># 实例化类</span><br><span class="hljs-string">x = MyClass()</span><br><span class="hljs-string"> </span><br><span class="hljs-string"># 访问类的属性和方法</span><br><span class="hljs-string">print(“MyClass 类的属性 i 为：”, x.i)</span><br><span class="hljs-string">print(“MyClass 类的方法 f 输出为：”, x.f())</span><br></code></pre></td></tr></table></figure><p>MyClass 类的属性 i 为： 12345<br>MyClass 类的方法 f 输出为： hello world</p><h3 id="init"><a href="#init" class="headerlink" title="init()"></a><strong>init</strong>()</h3><ol><li>类有一个名为 <strong>init</strong>() 的特殊方法（构造方法），该方法在类实例化时会自动调用，像下面这样：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>    self.data = []<br></code></pre></td></tr></table></figure><ol start="2"><li><p>类定义了 <strong>init</strong>() 方法，类的实例化操作会自动调用 <strong>init</strong>() 方法。如下实例化类 MyClass，对应的 <strong>init</strong>() 方法就会被调用:<br><code>x = MyClass()</code></p></li><li><p>当然， <strong>init</strong>() 方法可以有参数，参数通过 <strong>init</strong>() 传递到类的实例化操作上。例如:</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, realpart, imagpart</span>):</span><br>        self.r = realpart<br>        self.i = imagpart<br>x = Complex(<span class="hljs-number">3.0</span>, -<span class="hljs-number">4.5</span>)<br>print(x.r, x.i)<br></code></pre></td></tr></table></figure><p>3.0 -4.5</p><h3 id="Classes（类）"><a href="#Classes（类）" class="headerlink" title="Classes（类）"></a>Classes（类）</h3><p>We have previously looked at two paradigms of programming - <strong>imperative</strong>(using statements, loops, and functions as subroutines), and <strong>functional</strong>(using pure functions, higher-order functions, and recursion).<br>Another very popular paradigm is <strong>object-oriented programming</strong> (OOP).<br>Objects are created using <strong>classes</strong>, which are actually the focal point of OOP.<br>The <strong>class</strong>describes what the object will be, but is separate from the object itself. In other words, a class can be described as an object’s blueprint, description, or definition.<br>You can use the same class as a blueprint for creating multiple different objects.<br>Classes are created using the keyword <strong>class</strong> and an indented block, which contains class <strong>methods</strong>(which are functions).<br>Below is an example of a simple class and its objects.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, color, legs</span>):</span><br>    self.color = color<br>    self.legs = legs<br><br>felix = Cat(<span class="hljs-string">&quot;ginger&quot;</span>, <span class="hljs-number">4</span>)<br>rover = Cat(<span class="hljs-string">&quot;dog-colored&quot;</span>, <span class="hljs-number">4</span>)<br>stumpy = Cat(<span class="hljs-string">&quot;brown&quot;</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>This code defines a class named Cat, which has two attributes: color and legs.Then the class is used to create 3 separate objects of that class.<br>Tap Continue to learn more!</p><h3 id="init-1"><a href="#init-1" class="headerlink" title="init"></a><strong>init</strong></h3><p>The <strong><strong>init</strong></strong> method is the most important method in a class.<br>This is called when an instance (object) of the class is created, using the class name as a function.<br>All methods must have <strong>self</strong> as their first parameter, although it isn’t explicitly passed, Python adds the <strong>self</strong> argument to the list for you; you do not need to include it when you call the methods. Within a method definition, <strong>self</strong>refers to the instance calling the method.<br>Instances of a class have <strong>attributes</strong>, which are pieces of data associated with them.<br>In this example, <strong>Cat</strong> instances have attributes <strong>color</strong>and <strong>legs</strong>. These can be accessed by putting a <strong>dot</strong>, and the attribute name after an instance.<br>In an <strong><strong>init</strong></strong> method, <strong>self.attribute</strong> can therefore be used to set the initial value of an instance’s attributes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, color, legs</span>):</span><br>    self.color = color<br>    self.legs = legs<br>felix = Cat(<span class="hljs-string">&quot;ginger&quot;</span>, <span class="hljs-number">4</span>)<br>print(felix.color)<br></code></pre></td></tr></table></figure><p>ginger</p><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ol><li>Classes can have other <strong>methods</strong>defined to add functionality to them.<br>Remember, that all methods must have <strong>self</strong>as their first parameter.<br>These methods are accessed using the same <strong>dot</strong>syntax as attributes. </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, color</span>):</span><br>    self.name = name<br>    self.color = color<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bark</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-string">&quot;Woof!&quot;</span>)<br>fido = Dog(<span class="hljs-string">&quot;Fido&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>)<br>print(fido.name)<br>fido.bark()<br></code></pre></td></tr></table></figure><p>Fido<br>Woof!</p><ol start="2"><li>Classes can also have <strong>class attributes</strong>, created by assigning variables within the body of the class. These can be accessed either from instances of the class, or the class itself.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>:</span><br>  legs = <span class="hljs-number">4</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, color</span>):</span><br>    self.name = name<br>    self.color = color<br>fido = Dog(<span class="hljs-string">&quot;Fido&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>)<br>print(fido.legs)<br>print(Dog.legs)<br></code></pre></td></tr></table></figure><p>4<br>4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>    self.name = name  <br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sayHi</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-string">&quot;Hi from &quot;</span>+ self.name)<br>  <br>s1 = Student(<span class="hljs-string">&quot;Amy&quot;</span>)<br>s1.sayHi()<br></code></pre></td></tr></table></figure><p>Hi from Amy</p><h3 id="Inheritance（继承）"><a href="#Inheritance（继承）" class="headerlink" title="Inheritance（继承）"></a>Inheritance（继承）</h3><ol><li><strong>Inheritance</strong>provides a way to share functionality between classes.<br>Imagine several classes, <strong>Cat</strong>, <strong>Dog</strong>, <strong>Rabbit</strong> and so on. Although they may differ in some ways (only <strong>Dog</strong>might have the method <strong>bark</strong>), they are likely to be similar in others (all having the attributes <strong>color</strong>and <strong>name</strong>).<br>This similarity can be expressed by making them all inherit from a <strong>superclass Animal</strong>, which contains the shared functionality.<br>To inherit a class from another class, put the superclass name in parentheses after the class name.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span> <br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, color</span>):</span><br>    self.name = name<br>    self.color = color<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">Animal</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">purr</span>(<span class="hljs-params">self</span>):</span><br>    print(“Purr…”)<br>        <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Animal</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bark</span>(<span class="hljs-params">self</span>):</span><br>    print(“Woof!”)<br><br>fido = Dog(“Fido”, “brown”)<br>print(fido.color)<br>fido.bark()<br></code></pre></td></tr></table></figure><p>brown<br>Woof!</p><ol start="2"><li>A class that inherits from another class is called a <strong>subclass</strong>.A class that is inherited from is called a <strong>superclass</strong>.If a class inherits from another with the same attributes or methods, it overrides them.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wolf</span>:</span> <br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, color</span>):</span><br>    self.name = name<br>    self.color = color<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bark</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-string">&quot;Grr...&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Wolf</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bark</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-string">&quot;Woof&quot;</span>)<br>        <br>husky = Dog(<span class="hljs-string">&quot;Max&quot;</span>, <span class="hljs-string">&quot;grey&quot;</span>)<br>husky.bark()<br></code></pre></td></tr></table></figure><p>Woof</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">method</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-number">1</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">method</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-number">2</span>)<br><br>B().method()<br></code></pre></td></tr></table></figure><p>2</p><ol start="3"><li>Inheritance can also be indirect. One class can inherit from another, and that class can inherit from a third class. </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">method</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-string">&quot;A method&quot;</span>)<br>    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">another_method</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-string">&quot;B method&quot;</span>)<br>    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>(<span class="hljs-params">B</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">third_method</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-string">&quot;C method&quot;</span>)<br>    <br>c = C()<br>c.method()<br>c.another_method()<br>c.third_method()<br></code></pre></td></tr></table></figure><p>A method<br>B method<br>C method</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-number">1</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-number">2</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>(<span class="hljs-params">B</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">c</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-number">3</span>)<br><br>c = C()<br>c.a()<br></code></pre></td></tr></table></figure><p>2</p><ol start="4"><li>The function <strong>super</strong>is a useful inheritance-related function that refers to the parent class. It can be used to find the method with a certain name in an object’s superclass.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">spam</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-number">1</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>(<span class="hljs-params">A</span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">spam</span>(<span class="hljs-params">self</span>):</span><br>    print(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">super</span>().spam()<br>            <br>B().spam()<br></code></pre></td></tr></table></figure><p>2<br>1</p><h3 id="Magic-Methods"><a href="#Magic-Methods" class="headerlink" title="Magic Methods"></a>Magic Methods</h3><ol><li><strong>Magic methods</strong> are special methods which have <strong>double underscores</strong> at the beginning and end of their names.<br>They are also known as <strong>dunders</strong>.<br>So far, the only one we have encountered is <strong><strong>init</strong></strong>, but there are several others.<br>They are used to create functionality that can’t be represented as a normal method.<br>One common use of them is <strong>operator overloading</strong>.<br>This means defining operators for custom classes that allow operators such as + and * to be used on them.<br>An example magic method is <strong><strong>add</strong></strong> for +.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vector2D</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x, y</span>):</span><br>    self.x = x<br>    self.y = y<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__add__</span>(<span class="hljs-params">self, other</span>):</span><br>    <span class="hljs-keyword">return</span> Vector2D(self.x + other.x, self.y + other.y)<br><br>first = Vector2D(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>)<br>second = Vector2D(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>)<br>result = first + second<br>print(result.x)<br>print(result.y)<br></code></pre></td></tr></table></figure><p>8<br>16<br>(The <strong><strong>add</strong></strong> <del>method</del> allows for the definition of a custom behavior for the + operator in our class. As you can see, it adds the corresponding attributes of the objects and returns a new object, containing the result.<br>Once it’s defined, we can add two objects of the class together.)</p><ol start="2"><li>More magic methods for common operators:<br><strong><strong>sub</strong></strong> for -<br><strong><strong>mul</strong></strong> for *<br><strong><strong>truediv</strong></strong> for /<br><strong><strong>floordiv</strong></strong> for //<br><strong><strong>mod</strong></strong> for %<br><strong><strong>pow</strong></strong> for **<br><strong><strong>and</strong></strong> for &amp;<br><strong><strong>xor</strong></strong> for ^<br><strong><strong>or</strong></strong> for |</li></ol><p>The expression <strong>x + y</strong> is translated into <strong>x.<strong>add</strong>(y)</strong>.<br>However, if x hasn’t implemented <strong>add</strong>, and x and y are of different types, then <strong>y.<strong>radd</strong>(x)</strong> is called.<br>There are equivalent <strong>r</strong> methods for all magic methods just mentioned.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpecialString</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cont</span>):</span><br>    self.cont = cont<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__truediv__</span>(<span class="hljs-params">self, other</span>):</span><br>    line = <span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-built_in">len</span>(other.cont)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\n&quot;</span>.join([self.cont, line, other.cont])<br><br>spam = SpecialString(<span class="hljs-string">&quot;spam&quot;</span>)<br>hello = SpecialString(<span class="hljs-string">&quot;Hello world!&quot;</span>)<br>print(spam / hello)<br></code></pre></td></tr></table></figure><h1 id="spam"><a href="#spam" class="headerlink" title="spam"></a>spam</h1><p>Hello world!</p><ol start="3"><li>Python also provides magic methods for comparisons.<br><strong><strong>lt</strong></strong> for &lt;<br>**__le__** for &lt;=<br>**__eq__** for ==<br>**__ne__** for !=<br>**__gt__** for &gt;<br><strong><strong>ge</strong></strong> for &gt;=</li></ol><p>If <strong><strong>ne</strong></strong> is not implemented, it returns the opposite of <strong><strong>eq</strong></strong>.<br>There are no other relationships between the other operators.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpecialString</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cont</span>):</span><br>    self.cont = cont<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__gt__</span>(<span class="hljs-params">self, other</span>):</span><br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(other.cont)+<span class="hljs-number">1</span>):<br>      result = other.cont[:index] + <span class="hljs-string">&quot;&gt;&quot;</span> + self.cont<br>      result += <span class="hljs-string">&quot;&gt;&quot;</span> + other.cont[index:]<br>      print(result)<br><br>spam = SpecialString(<span class="hljs-string">&quot;spam&quot;</span>)<br>eggs = SpecialString(<span class="hljs-string">&quot;eggs&quot;</span>)<br>spam &gt; eggs<br></code></pre></td></tr></table></figure><blockquote><p>spam&gt;eggs<br>e&gt;spam&gt;ggs<br>eg&gt;spam&gt;gs<br>egg&gt;spam&gt;s<br>eggs&gt;spam&gt;</p></blockquote><ol start="4"><li>There are several magic methods for making classes act like containers.<br><strong><strong>len</strong></strong>for len()<br><strong><strong>getitem</strong></strong> for indexing<br><strong><strong>setitem</strong></strong> for assigning to indexed values<br><strong><strong>delitem</strong></strong> for deleting indexed values<br><strong><strong>iter</strong></strong> for iteration over objects (e.g., in for loops)<br><strong><strong>contains</strong></strong> for in</li></ol><p>There are many other magic methods that we won’t cover here, such as <strong><strong>call</strong></strong>for calling objects as functions, and <strong><strong>int</strong></strong>, <strong><strong>str</strong></strong>, and the like, for converting objects to built-in types. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VagueList</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cont</span>):</span><br>    self.cont = cont<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, index</span>):</span><br>    <span class="hljs-keyword">return</span> self.cont[index + random.randint(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)]<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-keyword">return</span> random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(self.cont)*<span class="hljs-number">2</span>)<br><br>vague_list = VagueList([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>])<br>print(<span class="hljs-built_in">len</span>(vague_list))<br>print(<span class="hljs-built_in">len</span>(vague_list))<br>print(vague_list[<span class="hljs-number">2</span>])<br>print(vague_list[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>8<br>5<br>C<br>D<br>(We have overridden the len() <del>function</del> for the class VagueList to return a random number.The indexing <del>function</del> also returns a random item in a range from the list, based on the expression.)</p><hr><p>give up of opp</p><hr><h1 id="8-Regular-Expressions"><a href="#8-Regular-Expressions" class="headerlink" title="8. Regular Expressions"></a>8. Regular Expressions</h1><h3 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h3><ol><li><strong>Regular expressions</strong> are a powerful tool for various kinds of string manipulation.They are a domain specific language (DSL) that is present as a library in most modern programming languages, not just Python.They are useful for two main tasks:</li></ol><ul><li>verifying that strings match a <strong>pattern</strong>(for instance, that a string has the format of an email address), </li><li>performing substitutions in a string (such as changing all American spellings to British ones).</li></ul><ol start="2"><li>Regular expressions in Python can be accessed using the <strong>re</strong>module, which is part of the standard library. After you’ve defined a regular expression, the<strong>re.match</strong> function can be used to determine whether it matches at the <strong>beginning</strong>of a string.If it does, <strong>match</strong> returns an object representing the match, if not, it returns <strong>None</strong>.To avoid any confusion while working with regular expressions, we would use raw strings as <strong>r”expression”</strong>.Raw strings don’t escape anything, which makes use of regular expressions easier.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>pattern = <span class="hljs-string">r&quot;spam&quot;</span><br><br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;spamspamspam&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>   print(<span class="hljs-string">&quot;No match&quot;</span>)<br></code></pre></td></tr></table></figure><p>Match<br>(The above example checks if the pattern “spam” matches the string and prints “Match” if it does.Here the pattern is a simple word, but there are various characters, which would have special meaning when they are used in a regular expression.)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>s=<span class="hljs-string">r&quot;jiang&quot;</span><br><span class="hljs-keyword">if</span> re.match(s,<span class="hljs-string">&#x27;ji&#x27;</span>):<br>print(<span class="hljs-string">&#x27;yes&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>print(<span class="hljs-string">&#x27;no&#x27;</span>)<br></code></pre></td></tr></table></figure><p>no</p><ol start="3"><li>Other functions to match patterns are <strong>re.search</strong> and <strong>re.findall</strong>. The function <strong>re.search</strong> finds a match of a pattern anywhere in the string.The function <strong>re.findall</strong> returns a list of all substrings that match a pattern.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>pattern = <span class="hljs-string">r&quot;spam&quot;</span><br><br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;eggspamsausagespam&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>   print(<span class="hljs-string">&quot;No match&quot;</span>)<br><br><span class="hljs-keyword">if</span> re.search(pattern, <span class="hljs-string">&quot;eggspamsausagespam&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>   print(<span class="hljs-string">&quot;No match&quot;</span>)<br>    <br>print(re.findall(pattern, <span class="hljs-string">&quot;eggspamsausagespam&quot;</span>))<br></code></pre></td></tr></table></figure><p>No match<br>Match<br>[‘spam’, ‘spam’]</p><ol start="4"><li>The regex search returns an object with several methods that give details about it. These methods include <strong>group</strong> which returns the string matched, <strong>start</strong>and <strong>end</strong> which return the start and ending positions of the first match, and <strong>span</strong> which returns the start and end positions of the first match as a tuple.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>pattern = <span class="hljs-string">r&quot;cd&quot;</span><br><br>match = re.search(pattern, <span class="hljs-string">&quot;abcde&quot;</span>)<br><span class="hljs-keyword">if</span> match:<br>   print(match.group())<br>   print(match.start())<br>   print(match.end())<br>   print(match.span())<br></code></pre></td></tr></table></figure><p>cd<br>2<br>4<br>(2, 4)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>pattern = <span class="hljs-string">r&quot;test&quot;</span><br><br>match = re.search(pattern, <span class="hljs-string">&quot;some test&quot;</span>)<br>print(match.start())<br>print(match.end())<br></code></pre></td></tr></table></figure><p>5<br>9</p><ol start="5"><li><strong>Search &amp; Replace</strong><br>One of the most important <strong>re</strong>methods that use regular expressions is <strong>sub</strong>.<br><code>re.**sub**(pattern, repl, ~string~, count=0)</code><br>This method replaces all occurrences of the <strong>pattern</strong>in string with <strong>repl</strong>, substituting all occurrences, unless <strong>count</strong> provided. This method returns the modified string. </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;My name is David. Hi David.&quot;</span><br>pattern = <span class="hljs-string">r&quot;David&quot;</span><br>newstr = re.sub(pattern, <span class="hljs-string">&quot;Amy&quot;</span>, <span class="hljs-built_in">str</span>)<br>print(newstr)<br></code></pre></td></tr></table></figure><p>My name is Amy. Hi Amy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>num=<span class="hljs-string">&#x27;9123456789&#x27;</span><br>pattern=<span class="hljs-string">r&#x27;9&#x27;</span><br>num=re.sub(pattern,<span class="hljs-string">&#x27;0&#x27;</span>,num)<br>print(num)<br></code></pre></td></tr></table></figure><p>0123456780</p><h3 id="Simple-Metacharacters"><a href="#Simple-Metacharacters" class="headerlink" title="Simple Metacharacters"></a>Simple Metacharacters</h3><ol><li><p><strong>Metacharacters</strong>are what make regular expressions more powerful than normal string methods.They allow you to create regular expressions to represent concepts like “one or more repetitions of a vowel”.<br>The existence of metacharacters poses a problem if you want to create a regular expression (or <strong>regex</strong>) that matches a literal metacharacter, such as “$”. You can do this by escaping the metacharacters by putting a <strong>backslash</strong>in front of them. However, this can cause problems, since backslashes also have an escaping function in normal Python strings. This can mean putting three or four backslashes in a row to do all the escaping.<br><code>str=r&#39;I am \r\a\w!’</code></p></li><li><p>The first metacharacter we will look at is <strong>.</strong> (dot).  This matches <strong>any character</strong>, other than a new line.</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>pattern = <span class="hljs-string">r&quot;gr.y&quot;</span><br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;grey&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match 1&quot;</span>)<br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;gray&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match 2&quot;</span>)<br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;greey&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match 3&quot;</span>)<br></code></pre></td></tr></table></figure><p>Match 1<br>Match 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>pattern = <span class="hljs-string">r&quot;gr..y&quot;</span><br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;grey&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match 1&quot;</span>)<br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;gray&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match 2&quot;</span>)<br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;greey&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match 3&quot;</span>)<br></code></pre></td></tr></table></figure><p>Match 3</p><ol start="3"><li>The next two metacharacters are <strong>^</strong> and <strong>$</strong>.<br>These match the <strong>start</strong>and <strong>end</strong>of a string, respectively.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>pattern = <span class="hljs-string">r&quot;^gr.y$&quot;</span><br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;grey&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match 1&quot;</span>)<br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;gray&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match 2&quot;</span>)<br><span class="hljs-keyword">if</span> re.match(pattern, <span class="hljs-string">&quot;ray&quot;</span>):<br>   print(<span class="hljs-string">&quot;Match 3&quot;</span>)<br></code></pre></td></tr></table></figure><p>Match 1<br>Match 2<br>(The pattern “<strong>^gr.y$**” means that the <del>string</del> should start with **gr</strong>, then follow with any character, except a newline, and end with <strong>y</strong>.)</p><h3 id="Character-Classes"><a href="#Character-Classes" class="headerlink" title="Character Classes"></a>Character Classes</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用ssh实现hexo上传免输github账号密码</title>
    <link href="/2021/02/16/%E7%94%A8ssh%E5%AE%9E%E7%8E%B0hexo%E4%B8%8A%E4%BC%A0%E5%85%8D%E8%BE%93github%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2021/02/16/%E7%94%A8ssh%E5%AE%9E%E7%8E%B0hexo%E4%B8%8A%E4%BC%A0%E5%85%8D%E8%BE%93github%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>在构建hexo博客后， 每次<code>hexo d</code>系统都会提示需要输入github账号和密码。解决这个问题，只需在github仓库里添加公钥即可。</p><h3 id="1-客户端生成密钥对"><a href="#1-客户端生成密钥对" class="headerlink" title="1.客户端生成密钥对"></a>1.客户端生成密钥对</h3><p>首先确认自己时候已经拥有密钥，Terminal中执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> ~/.ssh<br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>authorized_keys2  id_rsa       known_hosts<br>config            id_rsa.pub<br></code></pre></td></tr></table></figure><p>我们需要寻找一对 <code>id_rsa</code> 或 <code>id_dsa</code> 命名的文件，其中一个带 <code>.pub</code> 扩展名。<br>其中 <code>.pub</code> 文件是你的公钥，另一个则是私钥。<br>如果没有找不到这样的文件（ 或者根本就没有 <code>.ssh</code> 目录 ），我们可以通过 <code>ssh-keygen</code> 程序来创建它们。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ssh-keygen -t rsa -C <span class="hljs-string">&quot;example@yahoo.co.jp </span><br><span class="hljs-meta">#邮箱是自己的github邮箱</span><br></code></pre></td></tr></table></figure><p>首先 <code>ssh-keygen</code> 会确认密钥的存储位置和文件名（默认是 <code>.ssh/id_rsa</code>）,然后他会要求你输入两次密钥口令，留空即可。<br>所以一般选用默认，全部回车即可。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">.ssh</span> <br><span class="hljs-keyword">ls</span> <br></code></pre></td></tr></table></figure><p>会看到两个文件<code>id_rsa</code>和 <code> id_rsa.pub</code>，这两个文件就是你的公私钥了。然后，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> id_rsa.pub<br><span class="hljs-comment">#复制里面的内容，结果如下</span><br><span class="hljs-attribute">ssh</span>-rsa AAAAB<span class="hljs-number">3</span>NzaC<span class="hljs-number">1</span>yc<span class="hljs-number">2</span>EAAAABIwAAAQEAw<span class="hljs-number">7</span>/rIO<span class="hljs-number">8</span>jBbejKOvZdlZtxC<span class="hljs-number">8</span>K<span class="hljs-number">3</span>OMuFeC<span class="hljs-number">28</span>AnVQoZckRQxivtBkqXeg<span class="hljs-number">8</span>cPGBF<span class="hljs-number">54</span>UMaQVkMXpaYrfBg+WpjZjqO/V<span class="hljs-number">7</span>g<span class="hljs-number">33</span>ePCicNBr+<span class="hljs-number">7</span>rUXznD<span class="hljs-number">2</span>hiSEFDknESuGujtSWgoayfV<span class="hljs-number">3</span>u+qkAcBXxL<span class="hljs-number">7</span>WvG<span class="hljs-number">4</span>kizd<span class="hljs-number">6</span>DYq/Tf/<span class="hljs-number">6</span>ZHcOQavzpobr<span class="hljs-number">52</span>u<span class="hljs-number">8</span>NysUkrAV<span class="hljs-number">8</span>ZSO<span class="hljs-number">9</span>Dl<span class="hljs-number">306</span>msfkVhfi/QdkXIC<span class="hljs-number">4</span>X<span class="hljs-number">27</span>QXoFm<span class="hljs-number">5</span>hguY/JmNCI<span class="hljs-number">9</span>mHal<span class="hljs-number">5</span>h<span class="hljs-number">1</span>+a<span class="hljs-number">1</span>qr<span class="hljs-number">2</span>m+iUidR<span class="hljs-number">1</span>rOUGmcQ<span class="hljs-number">1</span>o<span class="hljs-number">2</span>tmlDDbdu<span class="hljs-number">9</span>E<span class="hljs-number">1</span>YpMsxeLUz/XmUs<span class="hljs-number">3</span>pCEgobSPpl<span class="hljs-number">4</span>XjAMxgJ<span class="hljs-number">8</span>uutI<span class="hljs-number">2270</span>olh<span class="hljs-number">5</span>gJOYPW<span class="hljs-number">32</span>eN<span class="hljs-number">5</span>ixTpR<span class="hljs-number">5</span>Wir+JQYQ== example@yahoo.co.jp<br></code></pre></td></tr></table></figure><h3 id="2-将复制的公私添加到github仓库里"><a href="#2-将复制的公私添加到github仓库里" class="headerlink" title="2.将复制的公私添加到github仓库里"></a>2.将复制的公私添加到github仓库里</h3><p>进入blog仓库里的设置页下面的 <strong>deploy keys</strong>页面，将复制的公钥粘贴到下面的key里面。</p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p>Terminal中执行：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">ssh -T git@github.com<br><br><span class="hljs-comment">#出现如下结果表示成功</span><br>Hi RainChiangY/RainChiangY.github.io! You&#x27;ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access.<br></code></pre></td></tr></table></figure><h3 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h3><p>进入blgo根目录，<strong>_config.yml</strong></p><p>在最后的一行代码修改如如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-comment">#  repo: https://github.com/RainChiangY/RainChiangY.github.io.git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:RainChiangY/RainChiangY.github.io.git</span><br></code></pre></td></tr></table></figure><p>将原来的https链接修改成ssh的链接。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>配置成功后，然而一直报错如下</p><blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Permission denied (publickey).<br>fatal: Could <span class="hljs-keyword">not</span> <span class="hljs-built_in">read</span> <span class="hljs-built_in">from</span> remote repository.<br><br>Please make sure you have <span class="hljs-keyword">the</span> correct access rights<br><span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span> repository exists.<br></code></pre></td></tr></table></figure><p>尝试如下，解决：</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.ssh</span><br><span class="hljs-keyword">ls</span><br>ssh-keygen -lf ~<span class="hljs-string">/.ssh/id_rsa.pub</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/2021/02/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2021/02/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="Mac-Terminal-常用命令"><a href="#Mac-Terminal-常用命令" class="headerlink" title="Mac Terminal 常用命令"></a>Mac Terminal 常用命令</h3><p><code>sudo su</code> 切换root身份，不携带当前用户环境变量</p><p><code>mkdir</code> 新建文件夹</p><p><code>pwd</code> 查看当前路径</p><p><code>cd</code> 改变路径</p><p><code>ls</code> 列举当前路径下的全部文件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/16/hello-world/"/>
    <url>/2021/02/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
